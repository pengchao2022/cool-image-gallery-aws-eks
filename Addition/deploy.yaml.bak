name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend_ecr_url: ${{ steps.terraform-outputs.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.terraform-outputs.outputs.frontend_ecr_url }}
      rds_endpoint: ${{ steps.terraform-outputs.outputs.rds_endpoint }}
      rds_port: ${{ steps.terraform-outputs.outputs.rds_port }}
      rds_username: ${{ steps.terraform-outputs.outputs.rds_username }}
      rds_database: ${{ steps.terraform-outputs.outputs.rds_database }}
      s3_bucket_name: ${{ steps.terraform-outputs.outputs.s3_bucket_name }}
      s3_bucket_region: ${{ steps.terraform-outputs.outputs.s3_bucket_region }}
      alb_controller_role_arn: ${{ steps.terraform-outputs.outputs.alb_controller_role_arn }}
      backend_role_arn: ${{ steps.terraform-outputs.outputs.backend_role_arn }}
      frontend_role_arn: ${{ steps.terraform-outputs.outputs.frontend_role_arn }}
      alb_url: ${{ steps.terraform-outputs.outputs.alb_url }}
      # 新增 Community 数据库输出
      community_database_name: ${{ steps.terraform-outputs.outputs.community_database_name }}
      community_database_username: ${{ steps.terraform-outputs.outputs.community_database_username }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ⚙️ Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ✅ Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: 🚀 Terraform Plan and Apply
        run: |
          cd terraform
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="community_db_password=${{ secrets.COMMUNITY_DB_PASSWORD }}" \
            -var="community_db_username=${{ secrets.COMMUNITY_DB_USERNAME }}" \
            -var="community_db_name=${{ secrets.COMMUNITY_DB_NAME }}"
          terraform apply -auto-approve tfplan

      - name: 📋 Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          terraform output -json > outputs.json
          
          BACKEND_ECR_URL=$(jq -r '.backend_repository_url.value // empty' outputs.json)
          FRONTEND_ECR_URL=$(jq -r '.frontend_repository_url.value // empty' outputs.json)
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value // empty' outputs.json)
          RDS_PORT=$(jq -r '.rds_port.value // "5432"' outputs.json)
          RDS_USERNAME=$(jq -r '.rds_username.value // "comicadmin"' outputs.json)
          RDS_DATABASE=$(jq -r '.rds_database_name.value // "comicdb"' outputs.json)
          S3_BUCKET_NAME=$(jq -r '.s3_bucket_name.value // empty' outputs.json)
          S3_BUCKET_REGION=$(jq -r '.s3_bucket_region.value // empty' outputs.json)
          ALB_CONTROLLER_ROLE_ARN=$(jq -r '.alb_controller_role_arn.value // empty' outputs.json)
          BACKEND_ROLE_ARN=$(jq -r '.backend_role_arn.value // empty' outputs.json)
          FRONTEND_ROLE_ARN=$(jq -r '.frontend_role_arn.value // empty' outputs.json)
          ALB_URL=$(jq -r '.alb_url.value // empty' outputs.json)
          
          # 使用硬编码的 Community 数据库信息
          COMMUNITY_DB_NAME="communitydb"
          COMMUNITY_DB_USERNAME="community_user"
          
          echo "backend_ecr_url=$BACKEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "frontend_ecr_url=$FRONTEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "rds_port=$RDS_PORT" >> $GITHUB_OUTPUT
          echo "rds_username=$RDS_USERNAME" >> $GITHUB_OUTPUT
          echo "rds_database=$RDS_DATABASE" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket_region=$S3_BUCKET_REGION" >> $GITHUB_OUTPUT
          echo "alb_controller_role_arn=$ALB_CONTROLLER_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "backend_role_arn=$BACKEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "frontend_role_arn=$FRONTEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT
          
          # 使用硬编码值
          echo "community_database_name=$COMMUNITY_DB_NAME" >> $GITHUB_OUTPUT
          echo "community_database_username=$COMMUNITY_DB_USERNAME" >> $GITHUB_OUTPUT

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

  build-and-push-images:
    name: "Build and Push Docker Images"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    if: needs.terraform-infrastructure.result == 'success'
    
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image_tag }}
      frontend_image: ${{ steps.build-frontend.outputs.image_tag }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Get AWS Account ID and ECR Registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: 🔐 Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: 🔍 Set ECR URLs
        run: |
          echo "BACKEND_ECR_URL=${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}" >> $GITHUB_ENV
          echo "FRONTEND_ECR_URL=${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}" >> $GITHUB_ENV

      - name: 🏗 Check if Backend Image Exists
        id: check-backend
        run: |
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          if docker manifest inspect $BACKEND_IMAGE > /dev/null 2>&1; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          fi

      - name: 🧱 Build Backend Image (if needed)
        id: build-backend
        if: steps.check-backend.outputs.image_exists == 'false'
        run: |
          cd backend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing backend image: $BACKEND_IMAGE"
          docker build -t $BACKEND_IMAGE .
          docker push $BACKEND_IMAGE
          echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT

      - name: 🎨 Build Frontend Image
        id: build-frontend
        run: |
          cd frontend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          FRONTEND_IMAGE="$FRONTEND_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing frontend image: $FRONTEND_IMAGE"
          docker build -t $FRONTEND_IMAGE .
          docker push $FRONTEND_IMAGE
          echo "image_tag=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT

  deploy-applications:
    name: "Deploy Applications to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-and-push-images
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🧰 Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: 🔧 Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: 🔧 Update Service Account Role ARNs
        run: |
          ALB_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.alb_controller_role_arn }}"
          BACKEND_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.backend_role_arn }}"
          FRONTEND_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.frontend_role_arn }}"
          
          sed -i "s|ALB_ROLE_ARN_PLACEHOLDER|$ALB_ROLE_ARN|g" k8s/service-accounts/alb-service-account.yaml
          sed -i "s|BACKEND_ROLE_ARN_PLACEHOLDER|$BACKEND_ROLE_ARN|g" k8s/service-accounts/backend-service-account.yaml
          sed -i "s|FRONTEND_ROLE_ARN_PLACEHOLDER|$FRONTEND_ROLE_ARN|g" k8s/service-accounts/frontend-service-account.yaml

      - name: 🔧 Apply ALB Controller ServiceAccount
        run: |
          kubectl delete serviceaccount aws-load-balancer-controller -n kube-system --ignore-not-found=true
          kubectl apply -f k8s/service-accounts/alb-service-account.yaml

      - name: 🔄 Restart ALB Controller
        run: |
          kubectl rollout restart deployment/aws-load-balancer-controller -n kube-system
          kubectl rollout status deployment/aws-load-balancer-controller -n kube-system --timeout=300s

      - name: 🗃 Create Namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 🔧 Update Kubernetes Secrets
        run: |
          export RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          export RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          export RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          export RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
          export RDS_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export S3_BUCKET_NAME="${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}"
          export AWS_REGION="${{ env.AWS_REGION }}"
          
          # 新增 Community 数据库环境变量
          export COMMUNITY_DB_NAME="communitydb"
          export COMMUNITY_DB_USERNAME="community_user"
          export COMMUNITY_DB_PASSWORD="${{ secrets.COMMUNITY_DB_PASSWORD }}"
          
          envsubst < k8s/configs/rds-secret.yaml > k8s/configs/rds-secret.yaml.tmp
          mv k8s/configs/rds-secret.yaml.tmp k8s/configs/rds-secret.yaml
          
          envsubst < k8s/configs/backend-secret.yaml > k8s/configs/backend-secret.yaml.tmp
          mv k8s/configs/backend-secret.yaml.tmp k8s/configs/backend-secret.yaml
          
          envsubst < k8s/configs/s3-secret.yaml > k8s/configs/s3-secret.yaml.tmp
          mv k8s/configs/s3-secret.yaml.tmp k8s/configs/s3-secret.yaml

      - name: 🚀 Deploy Resources (excluding Deployments)
        run: |
          cd k8s
          kubectl apply -f namespaces/comic-website.yaml
          kubectl apply -f service-accounts/alb-service-account.yaml
          kubectl apply -f service-accounts/backend-service-account.yaml
          kubectl apply -f service-accounts/frontend-service-account.yaml
          kubectl apply -f configs/backend-config.yaml
          kubectl apply -f configs/frontend-config.yaml
          kubectl apply -f configs/rds-secret.yaml
          kubectl apply -f configs/backend-secret.yaml
          kubectl apply -f configs/s3-secret.yaml
          kubectl apply -f service/backend-service.yaml
          kubectl apply -f service/frontend-service.yaml
          kubectl apply -f networking/alb-ingress-class.yaml
          kubectl apply -f networking/alb-ingress.yaml

      - name: 🧹 Clean Up Existing Community DB Job
        run: |
          echo "=== 清理已存在的 Community 数据库 Job ==="
          kubectl delete job community-db-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          sleep 5
          echo "✅ 清理完成"

      - name: 🗃 Create Community Database via Kubernetes Job
        run: |
          echo "=== 使用 Kubernetes Job 创建 Community 数据库 ==="
          
          # 创建 Kubernetes Job 来执行数据库创建
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: community-db-setup
            namespace: ${{ env.NAMESPACE }}
          spec:
            template:
              spec:
                containers:
                - name: postgres-client
                  image: postgres:15-alpine
                  env:
                  - name: PGHOST
                    value: "$(echo "${{ needs.terraform-infrastructure.outputs.rds_endpoint }}" | cut -d':' -f1)"
                  - name: PGPORT
                    value: "${{ needs.terraform-infrastructure.outputs.rds_port }}"
                  - name: PGUSER
                    value: "${{ needs.terraform-infrastructure.outputs.rds_username }}"
                  - name: PGPASSWORD
                    value: "${{ secrets.DB_PASSWORD }}"
                  - name: COMMUNITY_DB_NAME
                    value: "communitydb"
                  - name: COMMUNITY_DB_USERNAME
                    value: "community_user"
                  - name: COMMUNITY_DB_PASSWORD
                    value: "${{ secrets.COMMUNITY_DB_PASSWORD }}"
                  command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "🔄 开始创建 Community 数据库..."
                    
                    echo "环境变量:"
                    echo "PGHOST: \$PGHOST"
                    echo "PGPORT: \$PGPORT" 
                    echo "PGUSER: \$PGUSER"
                    echo "COMMUNITY_DB_NAME: \$COMMUNITY_DB_NAME"
                    echo "COMMUNITY_DB_USERNAME: \$COMMUNITY_DB_USERNAME"
                    
                    # 等待 RDS 可用
                    echo "⏳ 等待 RDS 可用..."
                    for i in \$(seq 1 30); do
                      if psql -d postgres -c "\q" 2>/dev/null; then
                        echo "✅ RDS 连接成功"
                        break
                      else
                        echo "⏳ 尝试 \$i: RDS 连接失败，等待 10 秒..."
                        sleep 10
                      fi
                    done
                    
                    # 检查数据库是否已存在，如果不存在则创建
                    echo "检查数据库是否已存在: \$COMMUNITY_DB_NAME"
                    if psql -d postgres -c "\l" | grep -q "\$COMMUNITY_DB_NAME"; then
                      echo "✅ 数据库 \$COMMUNITY_DB_NAME 已存在，跳过创建"
                    else
                      echo "创建数据库: \$COMMUNITY_DB_NAME"
                      psql -d postgres -c "CREATE DATABASE \$COMMUNITY_DB_NAME;"
                      echo "✅ 数据库创建成功"
                    fi
                    
                    # 检查用户是否已存在，如果不存在则创建
                    echo "检查用户是否已存在: \$COMMUNITY_DB_USERNAME"
                    if psql -d postgres -c "SELECT 1 FROM pg_roles WHERE rolname='\$COMMUNITY_DB_USERNAME'" | grep -q "1"; then
                      echo "✅ 用户 \$COMMUNITY_DB_USERNAME 已存在，跳过创建"
                    else
                      echo "创建用户: \$COMMUNITY_DB_USERNAME"
                      psql -d postgres -c "CREATE USER \$COMMUNITY_DB_USERNAME WITH PASSWORD '\$COMMUNITY_DB_PASSWORD';"
                      echo "✅ 用户创建成功"
                    fi
                    
                    # 授予权限
                    echo "授予权限..."
                    psql -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE \$COMMUNITY_DB_NAME TO \$COMMUNITY_DB_USERNAME;"
                    
                    # 验证数据库创建
                    echo "验证数据库创建..."
                    psql -d postgres -c "\l" | grep "\$COMMUNITY_DB_NAME" && echo "✅ 数据库创建验证成功" || echo "⚠️ 数据库创建验证未找到记录"
                    
                    echo "✅ Community 数据库设置完成"
                restartPolicy: Never
            backoffLimit: 2
          EOF
          
          echo "⏳ 等待 Community 数据库创建 Job 完成..."
          if kubectl wait --for=condition=complete job/community-db-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "✅ Community 数据库创建成功"
            echo "=== Job 日志 ==="
            kubectl logs job/community-db-setup -n ${{ env.NAMESPACE }}
            # 清理 Job
            kubectl delete job community-db-setup -n ${{ env.NAMESPACE }}
          else
            echo "❌ Community 数据库创建失败"
            echo "=== 检查 Job 状态 ==="
            kubectl describe job community-db-setup -n ${{ env.NAMESPACE }}
            echo "=== 检查 Pod 日志 ==="
            kubectl logs job/community-db-setup -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: 🗃 Create Community Database Tables via Kubernetes Job
        run: |
          echo "=== 使用 Kubernetes Job 创建 Community 数据库表结构 ==="
          
          # 创建 Kubernetes Job 来执行表结构创建
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: community-schema-setup
            namespace: ${{ env.NAMESPACE }}
          spec:
            template:
              spec:
                containers:
                - name: postgres-migration
                  image: postgres:15-alpine
                  env:
                  - name: PGHOST
                    value: "$(echo "${{ needs.terraform-infrastructure.outputs.rds_endpoint }}" | cut -d':' -f1)"
                  - name: PGPORT
                    value: "${{ needs.terraform-infrastructure.outputs.rds_port }}"
                  - name: PGUSER
                    value: "community_user"
                  - name: PGPASSWORD
                    value: "${{ secrets.COMMUNITY_DB_PASSWORD }}"
                  - name: PGDATABASE
                    value: "communitydb"
                  command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "🔄 开始创建 Community 数据库表结构..."
                    
                    # 等待数据库可用
                    echo "⏳ 等待数据库可用..."
                    for i in \$(seq 1 30); do
                      if psql -c "\q" 2>/dev/null; then
                        echo "✅ 数据库连接成功"
                        break
                      else
                        echo "⏳ 尝试 \$i: 数据库连接失败，等待 10 秒..."
                        sleep 10
                      fi
                    done
                    
                    # 执行 SQL 语句创建表结构
                    echo "创建表结构..."
                    psql -c "
                    -- Enable extensions
                    CREATE EXTENSION IF NOT EXISTS pg_trgm;

                    -- 创建用户表
                    CREATE TABLE IF NOT EXISTS users (
                        id SERIAL PRIMARY KEY,
                        username VARCHAR(50) UNIQUE NOT NULL,
                        email VARCHAR(255) UNIQUE NOT NULL,
                        password_hash VARCHAR(255) NOT NULL,
                        role VARCHAR(20) DEFAULT 'user',
                        avatar TEXT,
                        reputation INTEGER DEFAULT 0,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );

                    -- 创建帖子表
                    CREATE TABLE IF NOT EXISTS posts (
                        id SERIAL PRIMARY KEY,
                        title VARCHAR(255) NOT NULL,
                        content TEXT NOT NULL,
                        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                        post_type VARCHAR(50) DEFAULT 'discussion',
                        category VARCHAR(100) DEFAULT 'general',
                        status VARCHAR(20) DEFAULT 'published',
                        view_count INTEGER DEFAULT 0,
                        like_count INTEGER DEFAULT 0,
                        comment_count INTEGER DEFAULT 0,
                        tags VARCHAR(500),
                        is_pinned BOOLEAN DEFAULT FALSE,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );

                    -- 创建评论表
                    CREATE TABLE IF NOT EXISTS comments (
                        id SERIAL PRIMARY KEY,
                        post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
                        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                        parent_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
                        content TEXT NOT NULL,
                        like_count INTEGER DEFAULT 0,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );

                    -- 创建点赞表
                    CREATE TABLE IF NOT EXISTS likes (
                        id SERIAL PRIMARY KEY,
                        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                        post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
                        comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        CONSTRAINT unique_user_post_like UNIQUE (user_id, post_id),
                        CONSTRAINT unique_user_comment_like UNIQUE (user_id, comment_id),
                        CONSTRAINT check_like_target CHECK (
                            (post_id IS NOT NULL AND comment_id IS NULL) OR 
                            (post_id IS NULL AND comment_id IS NOT NULL)
                        )
                    );

                    -- 创建索引
                    CREATE INDEX IF NOT EXISTS idx_posts_user_id ON posts(user_id);
                    CREATE INDEX IF NOT EXISTS idx_posts_created_at ON posts(created_at DESC);
                    CREATE INDEX IF NOT EXISTS idx_posts_type_status ON posts(post_type, status);
                    CREATE INDEX IF NOT EXISTS idx_posts_category ON posts(category);
                    CREATE INDEX IF NOT EXISTS idx_posts_like_count ON posts(like_count DESC);
                    CREATE INDEX IF NOT EXISTS idx_posts_pinned ON posts(is_pinned, created_at DESC);

                    CREATE INDEX IF NOT EXISTS idx_comments_post_id ON comments(post_id);
                    CREATE INDEX IF NOT EXISTS idx_comments_user_id ON comments(user_id);
                    CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id);
                    CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at DESC);

                    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
                    CREATE INDEX IF NOT EXISTS idx_users_reputation ON users(reputation DESC);

                    -- 创建触发器函数
                    CREATE OR REPLACE FUNCTION update_updated_at_column()
                    RETURNS TRIGGER AS \\$\\$
                    BEGIN
                        NEW.updated_at = CURRENT_TIMESTAMP;
                        RETURN NEW;
                    END;
                    \\$\\$ language 'plpgsql';

                    -- 创建触发器
                    DROP TRIGGER IF EXISTS update_users_updated_at ON users;
                    CREATE TRIGGER update_users_updated_at
                        BEFORE UPDATE ON users
                        FOR EACH ROW
                        EXECUTE FUNCTION update_updated_at_column();

                    DROP TRIGGER IF EXISTS update_posts_updated_at ON posts;
                    CREATE TRIGGER update_posts_updated_at
                        BEFORE UPDATE ON posts
                        FOR EACH ROW
                        EXECUTE FUNCTION update_updated_at_column();

                    DROP TRIGGER IF EXISTS update_comments_updated_at ON comments;
                    CREATE TRIGGER update_comments_updated_at
                        BEFORE UPDATE ON comments
                        FOR EACH ROW
                        EXECUTE FUNCTION update_updated_at_column();

                    -- 验证表创建
                    SELECT '✅ 表结构创建完成' as status;
                    "

                    # 验证表创建
                    echo "验证表创建..."
                    psql -c "\dt" && echo "✅ 表结构创建验证成功"

                    echo "✅ Community 数据库表结构创建完成"
                restartPolicy: Never
            backoffLimit: 2
          EOF
          
          echo "⏳ 等待 Community 数据库表结构创建 Job 完成..."
          if kubectl wait --for=condition=complete job/community-schema-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "✅ Community 数据库表结构创建成功"
            echo "=== Job 日志 ==="
            kubectl logs job/community-schema-setup -n ${{ env.NAMESPACE }}
            # 清理 Job
            kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }}
          else
            echo "❌ Community 数据库表结构创建失败"
            echo "=== 检查 Job 状态 ==="
            kubectl describe job community-schema-setup -n ${{ env.NAMESPACE }}
            echo "=== 检查 Pod 日志 ==="
            kubectl logs job/community-schema-setup -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: 🚀 Deploy or Replace Deployments
        run: |
          cd k8s
          if kubectl get deployment backend-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            kubectl replace -f deployments/backend-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            kubectl apply -f deployments/backend-deployment.yaml -n ${{ env.NAMESPACE }}
          fi
          
          if kubectl get deployment frontend-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            kubectl replace -f deployments/frontend-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            kubectl apply -f deployments/frontend-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: 🔍 Check if Migration is Needed
        id: check-migration
        run: |
          CURRENT_BACKEND_IMAGE=$(kubectl get deployment backend-deployment -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null || echo "")
          NEW_BACKEND_IMAGE="${{ needs.build-and-push-images.outputs.backend_image }}"
          
          if [ "$CURRENT_BACKEND_IMAGE" != "$NEW_BACKEND_IMAGE" ] || [ -z "$CURRENT_BACKEND_IMAGE" ]; then
            echo "migration_needed=true" >> $GITHUB_OUTPUT
          else
            echo "migration_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧹 Clean Up Existing Migration Job
        if: steps.check-migration.outputs.migration_needed == 'true'
        run: |
          kubectl delete job db-migration -n ${{ env.NAMESPACE }} --ignore-not-found=true
          sleep 5

      - name: 🗃 Run Database Migrations (if needed)
        if: steps.check-migration.outputs.migration_needed == 'true'
        run: |
          BACKEND_IMAGE="${{ needs.build-and-push-images.outputs.backend_image }}"
          sed "s|PLACEHOLDER_BACKEND_IMAGE|$BACKEND_IMAGE|g" k8s/migrations/db-migration-job.yaml > /tmp/db-migration-job.yaml
          kubectl apply -f /tmp/db-migration-job.yaml

          if kubectl wait --for=condition=complete job/db-migration -n ${{ env.NAMESPACE }} --timeout=300s; then
            MIGRATION_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l job-name=db-migration -o jsonpath='{.items[0].metadata.name}')
            kubectl logs $MIGRATION_POD -n ${{ env.NAMESPACE }}
            kubectl delete job db-migration -n ${{ env.NAMESPACE }}
          else
            echo "迁移失败"
            exit 1
          fi

      - name: 🔄 Update Deployment Images
        run: |
          BACKEND_IMAGE="${{ needs.build-and-push-images.outputs.backend_image }}"
          FRONTEND_IMAGE="${{ needs.build-and-push-images.outputs.frontend_image }}"
          
          kubectl patch deployment backend-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"backend","image":"'"$BACKEND_IMAGE"'"}]}}}}'
          
          kubectl patch deployment frontend-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"frontend","image":"'"$FRONTEND_IMAGE"'"}]}}}}'

      - name: ⏳ Wait for Deployments
        run: |
          kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=180s

      - name: 🌐 Get ALB URL
        id: get-alb-url
        run: |
          for i in {1..15}; do
            ALB_HOSTNAME=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALB_HOSTNAME" ]; then
              echo "alb_url=http://$ALB_HOSTNAME" >> $GITHUB_OUTPUT
              break
            else
              sleep 20
            fi
          done

      - name: 📢 Display Application URL
        run: |
          echo "================================================"
          echo "🚀 Deployment finished!"
          echo "================================================"
          echo ""
          echo "🌐 access URL:"
          echo "   ${{ steps.get-alb-url.outputs.alb_url }}"
          echo "================================================"