apiVersion: batch/v1
kind: Job
metadata:
  name: community-schema-setup
  namespace: comic-website
spec:
  template:
    spec:
      containers:
      - name: postgres-migration
        image: postgres:15-alpine
        env:
        - name: PGHOST
          value: "comic-website-prod-db.c8hmw642ur0e.us-east-1.rds.amazonaws.com"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: "community_user"
        - name: PGPASSWORD
          value: "‰Ω†ÁöÑÂØÜÁ†Å"
        - name: PGDATABASE
          value: "communitydb"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "üîÑ ÂºÄÂßãÂàõÂª∫ Community Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ..."
          
          # ÊâßË°å SQL ËØ≠Âè•
          psql -c "
          -- Enable extensions
          CREATE EXTENSION IF NOT EXISTS pg_trgm;

          -- ÂàõÂª∫Áî®Êà∑Ë°®
          CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              username VARCHAR(50) UNIQUE NOT NULL,
              email VARCHAR(255) UNIQUE NOT NULL,
              password_hash VARCHAR(255) NOT NULL,
              role VARCHAR(20) DEFAULT 'user',
              avatar TEXT,
              reputation INTEGER DEFAULT 0,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );

          -- ÂàõÂª∫Â∏ñÂ≠êË°®
          CREATE TABLE IF NOT EXISTS posts (
              id SERIAL PRIMARY KEY,
              title VARCHAR(255) NOT NULL,
              content TEXT NOT NULL,
              user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
              post_type VARCHAR(50) DEFAULT 'discussion',
              category VARCHAR(100) DEFAULT 'general',
              status VARCHAR(20) DEFAULT 'published',
              view_count INTEGER DEFAULT 0,
              like_count INTEGER DEFAULT 0,
              comment_count INTEGER DEFAULT 0,
              tags VARCHAR(500),
              is_pinned BOOLEAN DEFAULT FALSE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );

          -- ÂàõÂª∫ËØÑËÆ∫Ë°®
          CREATE TABLE IF NOT EXISTS comments (
              id SERIAL PRIMARY KEY,
              post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
              user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
              parent_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
              content TEXT NOT NULL,
              like_count INTEGER DEFAULT 0,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );

          -- ÂàõÂª∫ÁÇπËµûË°®
          CREATE TABLE IF NOT EXISTS likes (
              id SERIAL PRIMARY KEY,
              user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
              post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
              comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              CONSTRAINT unique_user_post_like UNIQUE (user_id, post_id),
              CONSTRAINT unique_user_comment_like UNIQUE (user_id, comment_id),
              CONSTRAINT check_like_target CHECK (
                  (post_id IS NOT NULL AND comment_id IS NULL) OR 
                  (post_id IS NULL AND comment_id IS NOT NULL)
              )
          );

          -- ÂàõÂª∫Á¥¢Âºï
          CREATE INDEX IF NOT EXISTS idx_posts_user_id ON posts(user_id);
          CREATE INDEX IF NOT EXISTS idx_posts_created_at ON posts(created_at DESC);
          CREATE INDEX IF NOT EXISTS idx_posts_type_status ON posts(post_type, status);
          CREATE INDEX IF NOT EXISTS idx_posts_category ON posts(category);
          CREATE INDEX IF NOT EXISTS idx_posts_like_count ON posts(like_count DESC);
          CREATE INDEX IF NOT EXISTS idx_posts_pinned ON posts(is_pinned, created_at DESC);

          CREATE INDEX IF NOT EXISTS idx_comments_post_id ON comments(post_id);
          CREATE INDEX IF NOT EXISTS idx_comments_user_id ON comments(user_id);
          CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id);
          CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at DESC);

          CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
          CREATE INDEX IF NOT EXISTS idx_users_reputation ON users(reputation DESC);

          -- ÂàõÂª∫Ëß¶ÂèëÂô®ÂáΩÊï∞
          CREATE OR REPLACE FUNCTION update_updated_at_column()
          RETURNS TRIGGER AS \$\$
          BEGIN
              NEW.updated_at = CURRENT_TIMESTAMP;
              RETURN NEW;
          END;
          \$\$ language 'plpgsql';

          -- ÂàõÂª∫Ëß¶ÂèëÂô®
          DROP TRIGGER IF EXISTS update_users_updated_at ON users;
          CREATE TRIGGER update_users_updated_at
              BEFORE UPDATE ON users
              FOR EACH ROW
              EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_posts_updated_at ON posts;
          CREATE TRIGGER update_posts_updated_at
              BEFORE UPDATE ON posts
              FOR EACH ROW
              EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_comments_updated_at ON comments;
          CREATE TRIGGER update_comments_updated_at
              BEFORE UPDATE ON comments
              FOR EACH ROW
              EXECUTE FUNCTION update_updated_at_column();

          -- È™åËØÅË°®ÂàõÂª∫
          SELECT '‚úÖ Ë°®ÁªìÊûÑÂàõÂª∫ÂÆåÊàê' as status;
          "

          echo "‚úÖ Community Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑÂàõÂª∫ÂÆåÊàê"
        restartPolicy: Never
  backoffLimit: 2