name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend_ecr_url: ${{ steps.terraform-outputs.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.terraform-outputs.outputs.frontend_ecr_url }}

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üèó Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ‚öôÔ∏è Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ‚úÖ Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: üöÄ Terraform Plan and Apply
        run: |
          cd terraform
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"
          terraform apply -auto-approve tfplan

      - name: üìã Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "üîç Getting Terraform outputs..."
          
          # Áõ¥Êé•‰ΩøÁî® terraform output ÂëΩ‰ª§Ëé∑Âèñ
          BACKEND_ECR_URL=$(terraform output -raw backend_repository_url)
          FRONTEND_ECR_URL=$(terraform output -raw frontend_repository_url)
          
          echo "Backend ECR URL: $BACKEND_ECR_URL"
          echo "Frontend ECR URL: $FRONTEND_ECR_URL"
          
          if [ -z "$BACKEND_ECR_URL" ] || [ "$BACKEND_ECR_URL" = "null" ]; then
            echo "‚ùå Backend ECR URL is empty or null"
            exit 1
          fi
          
          if [ -z "$FRONTEND_ECR_URL" ] || [ "$FRONTEND_ECR_URL" = "null" ]; then
            echo "‚ùå Frontend ECR URL is empty or null"
            exit 1
          fi
          
          echo "backend_ecr_url=$BACKEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "frontend_ecr_url=$FRONTEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ ECR URLs successfully extracted"

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: üß† Install or Upgrade ALB Ingress Controller
        run: |
          set -e
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          VPC_ID=$(aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION --query "cluster.resourcesVpcConfig.vpcId" --output text)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          cat <<EOF > alb-serviceaccount.yaml
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-load-balancer-controller
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::$ACCOUNT_ID:role/AmazonEKSLoadBalancerControllerRole-$CLUSTER_NAME
          EOF

          kubectl apply -f alb-serviceaccount.yaml

          cat <<EOF > alb-values.yaml
          clusterName: $CLUSTER_NAME
          region: $AWS_REGION
          vpcId: $VPC_ID
          serviceAccount:
            create: false
            name: aws-load-balancer-controller
          EOF

          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            -f alb-values.yaml \
            --version 1.6.1 \
            --wait

  deploy-applications:
    name: "Deploy Applications to EKS"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîç Set ECR URLs from previous job
        run: |
          echo "BACKEND_ECR_URL=${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}" >> $GITHUB_ENV
          echo "FRONTEND_ECR_URL=${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}" >> $GITHUB_ENV
          echo "‚úÖ Backend ECR URL: ${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          echo "‚úÖ Frontend ECR URL: ${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}"

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: üîç Get AWS Account ID and ECR Registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "‚úÖ AWS Account ID: $ACCOUNT_ID"
          echo "‚úÖ ECR Registry: $ECR_REGISTRY"

      - name: üîê Login to ECR
        run: |
          echo "Logging into ECR registry: $ECR_REGISTRY"
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: üîç Debug ECR URLs
        run: |
          echo "Backend ECR URL: $BACKEND_ECR_URL"
          echo "Frontend ECR URL: $FRONTEND_ECR_URL"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_SHA shortened: ${GITHUB_SHA:0:8}"

          # È™åËØÅ ECR ‰ªìÂ∫ìÊòØÂê¶Â≠òÂú®
          if [ -n "$BACKEND_ECR_URL" ]; then
            REPO_NAME=$(echo $BACKEND_ECR_URL | cut -d'/' -f2)
            echo "üîç Checking backend ECR repository: $REPO_NAME"
            aws ecr describe-repositories --repository-names $REPO_NAME --region ${{ env.AWS_REGION }} && echo "‚úÖ Backend repository exists" || echo "‚ùå Backend repository not found"
          fi

          if [ -n "$FRONTEND_ECR_URL" ]; then
            REPO_NAME=$(echo $FRONTEND_ECR_URL | cut -d'/' -f2)
            echo "üîç Checking frontend ECR repository: $REPO_NAME"
            aws ecr describe-repositories --repository-names $REPO_NAME --region ${{ env.AWS_REGION }} && echo "‚úÖ Frontend repository exists" || echo "‚ùå Frontend repository not found"
          fi

      - name: üß± Build and Push Backend Image
        run: |
          cd backend
          echo "üèó Building backend image..."
          docker build -t $BACKEND_ECR_URL:${GITHUB_SHA:0:8} .
          echo "üöÄ Pushing backend image to: $BACKEND_ECR_URL:${GITHUB_SHA:0:8}"
          docker push $BACKEND_ECR_URL:${GITHUB_SHA:0:8}
          echo "‚úÖ Backend image pushed: $BACKEND_ECR_URL:${GITHUB_SHA:0:8}"

      - name: üé® Build and Push Frontend Image
        run: |
          cd frontend
          echo "üèó Building frontend image..."
          docker build -t $FRONTEND_ECR_URL:${GITHUB_SHA:0:8} .
          echo "üöÄ Pushing frontend image to: $FRONTEND_ECR_URL:${GITHUB_SHA:0:8}"
          docker push $FRONTEND_ECR_URL:${GITHUB_SHA:0:8}
          echo "‚úÖ Frontend image pushed: $FRONTEND_ECR_URL:${GITHUB_SHA:0:8}"

      - name: üîë Apply Kubernetes Secrets
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          cat <<EOF > rds-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: rds-secret
            namespace: ${{ env.NAMESPACE }}
          type: Opaque
          stringData:
            host: localhost
            port: '5432'
            username: comicadmin
            database: comicdb
            password: ${{ secrets.DB_PASSWORD }}
          EOF

          kubectl apply -f rds-secret.yaml
          rm rds-secret.yaml

      - name: üöÄ Deploy using Kustomize
        run: |
          echo "üöÄ Applying all manifests using Kustomize..."
          cd k8s
          kubectl apply -k . --namespace ${{ env.NAMESPACE }}

          echo "üîß Patching deployments with new image versions..."
          BACKEND_IMAGE=$BACKEND_ECR_URL:${GITHUB_SHA:0:8}
          FRONTEND_IMAGE=$FRONTEND_ECR_URL:${GITHUB_SHA:0:8}

          kubectl set image deployment/backend-deployment backend=$BACKEND_IMAGE -n ${{ env.NAMESPACE }} || true
          kubectl set image deployment/frontend-deployment frontend=$FRONTEND_IMAGE -n ${{ env.NAMESPACE }} || true

      - name: ‚è≥ Wait for Deployments (with timeout)
        run: |
          echo "üîé Waiting for deployments to be ready..."
          
          # Á≠âÂæÖÂêéÁ´ØÈÉ®ÁΩ≤ÔºàÂ∏¶Ë∂ÖÊó∂Ôºâ
          timeout 300s bash -c "
            while true; do
              if kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} --timeout=60s 2>/dev/null; then
                echo '‚úÖ Backend deployment ready'
                break
              fi
              echo '‚è≥ Backend still deploying...'
              sleep 10
            done
          " || echo "‚ö†Ô∏è Backend deployment timeout, continuing..."

          # Á≠âÂæÖÂâçÁ´ØÈÉ®ÁΩ≤ÔºàÂ∏¶Ë∂ÖÊó∂Ôºâ
          timeout 180s bash -c "
            while true; do
              if kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=60s 2>/dev/null; then
                echo '‚úÖ Frontend deployment ready'
                break
              fi
              echo '‚è≥ Frontend still deploying...'
              sleep 10
            done
          " || echo "‚ö†Ô∏è Frontend deployment timeout, continuing..."

      - name: üìä Quick Status Check
        run: |
          echo "üìä Current deployment status:"
          kubectl get pods -n ${{ env.NAMESPACE }} --no-headers | while read line; do
            POD_NAME=$(echo $line | awk '{print $1}')
            STATUS=$(echo $line | awk '{print $3}')
            READY=$(echo $line | awk '{print $2}')
            echo "  $POD_NAME: $STATUS ($READY)"
          done

          echo -e "\nüìã Services:"
          kubectl get svc -n ${{ env.NAMESPACE }}

          echo -e "\nüåê Ingress:"
          kubectl get ingress -n ${{ env.NAMESPACE }}

      - name: üîç Get ALB Ingress URL (Fast)
        run: |
          echo "üöÄ Retrieving ALB ingress URL..."
          
          # Âø´ÈÄüÊ£ÄÊü•Ôºå‰∏çÁ≠âÂæÖÂ§™‰πÖ
          for i in {1..3}; do
            ALB_URL=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALB_URL" ]; then
              echo "‚úÖ ALB is ready!"
              echo "üåê ALB URL: http://$ALB_URL"
              echo "ALB_URL=http://$ALB_URL" >> $GITHUB_ENV
              break
            fi
            echo "‚è≥ ALB not ready yet (attempt $i/3)..."
            sleep 10
          done

          if [ -z "$ALB_URL" ]; then
            echo "‚ÑπÔ∏è ALB not ready yet. It will be available soon."
            echo "You can check later with: kubectl get ingress -n ${{ env.NAMESPACE }}"
          fi

      - name: üß™ Quick Health Check
        if: env.ALB_URL != ''
        run: |
          echo "üß™ Performing quick health check..."
          timeout 30s bash -c "
            until curl -f $ALB_URL/health 2>/dev/null; do
              echo '‚è≥ Health check not ready...'
              sleep 5
            done
          " && echo "‚úÖ Health check passed!" || echo "‚ö†Ô∏è Health check timeout or failed"