name: Deploy Comic Website

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Create S3 Backend Bucket
      run: |
        aws s3api create-bucket \
          --bucket ${{ env.TF_BACKEND_BUCKET }} \
          --region ${{ env.AWS_REGION }} \
          --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }} || true
        
        aws s3api put-bucket-versioning \
          --bucket ${{ env.TF_BACKEND_BUCKET }} \
          --versioning-configuration Status=Enabled
        
        aws s3api put-bucket-encryption \
          --bucket ${{ env.TF_BACKEND_BUCKET }} \
          --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }'

    - name: Create DynamoDB Table for State Locking
      run: |
        aws dynamodb create-table \
          --table-name comic-website-tfstate-lock \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --region ${{ env.AWS_REGION }} || true

    - name: Terraform Init
      id: init
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
          -backend-config="key=terraform/state/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=comic-website-tfstate-lock"

    - name: Terraform Format
      id: fmt
      run: |
        cd terraform
        terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform output -json > ../terraform_outputs.json
        cat ../terraform_outputs.json

    - name: Update kubeconfig
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.CLUSTER_NAME }}

    - name: Setup Kubernetes tools
      if: github.ref == 'refs/heads/main'
      uses: azure/setup-kubectl@v3
      
    - name: Setup Helm
      if: github.ref == 'refs/heads/main'
      uses: azure/setup-helm@v3

    - name: Install ALB Ingress Controller
      if: github.ref == 'refs/heads/main'
      run: |
        # Add EKS charts repository
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        
        # Install AWS Load Balancer Controller
        cat > alb-values.yaml <<EOF
        clusterName: ${{ env.CLUSTER_NAME }}
        serviceAccount:
          create: false
          name: aws-load-balancer-controller
        region: ${{ env.AWS_REGION }}
        vpcId: $(cd terraform && terraform output -raw vpc_id)
        image:
          repository: 602401143452.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/amazon/aws-load-balancer-controller
        EOF
        
        helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          -f alb-values.yaml \
          --version 1.6.1

    - name: Save Infrastructure Outputs
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        echo "DB_HOST=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
        echo "S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
        echo "BACKEND_ECR_URL=$(terraform output -raw backend_ecr_repository_url)" >> $GITHUB_ENV
        echo "FRONTEND_ECR_URL=$(terraform output -raw frontend_ecr_repository_url)" >> $GITHUB_ENV

  deploy-applications:
    name: "Deploy Applications to EKS"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.CLUSTER_NAME }}

    - name: Setup Kubernetes tools
      uses: azure/setup-kubectl@v3

    - name: Setup script permissions
      run: chmod +x scripts/*.sh

    - name: Build and Push Docker images
      run: |
        ./scripts/build-push-images.sh ${{ secrets.AWS_ACCOUNT_ID }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Setup Kubernetes Secrets
      run: |
        ./scripts/setup-secrets.sh
      env:
        DB_HOST: ${{ needs.terraform-infrastructure.outputs.db_host }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET_NAME: ${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}

    - name: Deploy Applications
      run: |
        ./scripts/deploy-k8s.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DB_HOST: ${{ needs.terraform-infrastructure.outputs.db_host }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        S3_BUCKET_NAME: ${{ needs.terraform-infrastructure.outputs.s3_bUCKET_NAME }}

    - name: Verify Deployment
      run: |
        echo "📊 Final deployment status:"
        kubectl get deployments,services,ingress -n ${{ env.NAMESPACE }}
        
        echo "🔍 Pods status:"
        kubectl get pods -n ${{ env.NAMESPACE }} -o wide
        
        echo "📝 Application logs:"
        kubectl logs -n ${{ env.NAMESPACE }} deployment/backend-deployment --tail=10 || true
        kubectl logs -n ${{ env.NAMESPACE }} deployment/frontend-deployment --tail=10 || true

    - name: Health Check
      run: |
        ALB_URL=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "pending")
        echo "🌐 ALB URL: http://$ALB_URL"
        
        if [ "$ALB_URL" != "pending" ]; then
          echo "🔍 Performing health check..."
          curl -f http://$ALB_URL/health || echo "Health check failed, application may still be starting"
        fi