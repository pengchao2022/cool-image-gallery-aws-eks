name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend_ecr_url: ${{ steps.terraform-outputs.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.terraform-outputs.outputs.frontend_ecr_url }}
      community_ecr_url: ${{ steps.terraform-outputs.outputs.community_ecr_url }}
      rds_endpoint: ${{ steps.terraform-outputs.outputs.rds_endpoint }}
      rds_port: ${{ steps.terraform-outputs.outputs.rds_port }}
      rds_username: ${{ steps.terraform-outputs.outputs.rds_username }}
      rds_database: ${{ steps.terraform-outputs.outputs.rds_database }}
      s3_bucket_name: ${{ steps.terraform-outputs.outputs.s3_bucket_name }}
      s3_bucket_region: ${{ steps.terraform-outputs.outputs.s3_bucket_region }}
      alb_controller_role_arn: ${{ steps.terraform-outputs.outputs.alb_controller_role_arn }}
      backend_role_arn: ${{ steps.terraform-outputs.outputs.backend_role_arn }}
      frontend_role_arn: ${{ steps.terraform-outputs.outputs.frontend_role_arn }}
      community_role_arn: ${{ steps.terraform-outputs.outputs.community_role_arn }}
      alb_url: ${{ steps.terraform-outputs.outputs.alb_url }}
      redis_host: ${{ steps.terraform-outputs.outputs.redis_host }}
      redis_port: ${{ steps.terraform-outputs.outputs.redis_port }}
      community_database_name: ${{ steps.terraform-outputs.outputs.community_database_name }}
      community_database_username: ${{ steps.terraform-outputs.outputs.community_database_username }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ⚙️ Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ✅ Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: 🚀 Terraform Plan and Apply
        run: |
          cd terraform
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="community_db_password=${{ secrets.COMMUNITY_DB_PASSWORD }}" \
            -var="community_db_username=${{ secrets.COMMUNITY_DB_USERNAME }}" \
            -var="community_db_name=${{ secrets.COMMUNITY_DB_NAME }}"
          terraform apply -auto-approve tfplan

      - name: 📋 Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          terraform output -json > outputs.json
          
          BACKEND_ECR_URL=$(jq -r '.backend_repository_url.value // empty' outputs.json)
          FRONTEND_ECR_URL=$(jq -r '.frontend_repository_url.value // empty' outputs.json)
          COMMUNITY_ECR_URL=$(jq -r '.community_repository_url.value // empty' outputs.json)
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value // empty' outputs.json)
          RDS_PORT=$(jq -r '.rds_port.value // "5432"' outputs.json)
          RDS_USERNAME=$(jq -r '.rds_username.value // "comicadmin"' outputs.json)
          RDS_DATABASE=$(jq -r '.rds_database_name.value // "comicdb"' outputs.json)
          S3_BUCKET_NAME=$(jq -r '.s3_bucket_name.value // empty' outputs.json)
          S3_BUCKET_REGION=$(jq -r '.s3_bucket_region.value // empty' outputs.json)
          ALB_CONTROLLER_ROLE_ARN=$(jq -r '.alb_controller_role_arn.value // empty' outputs.json)
          BACKEND_ROLE_ARN=$(jq -r '.backend_role_arn.value // empty' outputs.json)
          FRONTEND_ROLE_ARN=$(jq -r '.frontend_role_arn.value // empty' outputs.json)
          COMMUNITY_ROLE_ARN=$(jq -r '.community_role_arn.value // empty' outputs.json)
          ALB_URL=$(jq -r '.alb_url.value // empty' outputs.json)
          REDIS_HOST=$(jq -r '.redis_host.value // "redis-master.comic-website.svc.cluster.local"' outputs.json)
          REDIS_PORT=$(jq -r '.redis_port.value // "6379"' outputs.json)
          COMMUNITY_DB_NAME="${{ secrets.COMMUNITY_DB_NAME }}"
          COMMUNITY_DB_USERNAME="${{ secrets.COMMUNITY_DB_USERNAME }}"
          
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "⚠️ WARNING: COMMUNITY_ECR_URL is empty, creating temporary ECR URL"
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            COMMUNITY_ECR_URL="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/comic-website-prod-community"
          fi
          
          echo "backend_ecr_url=$BACKEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "frontend_ecr_url=$FRONTEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "community_ecr_url=$COMMUNITY_ECR_URL" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "rds_port=$RDS_PORT" >> $GITHUB_OUTPUT
          echo "rds_username=$RDS_USERNAME" >> $GITHUB_OUTPUT
          echo "rds_database=$RDS_DATABASE" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket_region=$S3_BUCKET_REGION" >> $GITHUB_OUTPUT
          echo "alb_controller_role_arn=$ALB_CONTROLLER_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "backend_role_arn=$BACKEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "frontend_role_arn=$FRONTEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "community_role_arn=$COMMUNITY_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT
          echo "redis_port=$REDIS_PORT" >> $GITHUB_OUTPUT
          echo "community_database_name=$COMMUNITY_DB_NAME" >> $GITHUB_OUTPUT
          echo "community_database_username=$COMMUNITY_DB_USERNAME" >> $GITHUB_OUTPUT

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 📊 Check and Install Metrics Server
        run: |
          echo "Checking if Metrics Server is already installed..."
          
          # 检查 Metrics Server 是否已经存在
          if kubectl get deployment metrics-server -n kube-system > /dev/null 2>&1; then
            echo "✅ Metrics Server is already installed, skipping installation"
            echo "=== Existing Metrics Server Status ==="
            kubectl get pods -n kube-system -l k8s-app=metrics-server
            echo "=== Metrics API Service Status ==="
            kubectl get apiservice v1beta1.metrics.k8s.io
          else
            echo "📦 Installing Metrics Server for resource monitoring..."
            
            # 安装 Metrics Server
            kubectl apply -f k8s/monitoring/metrics-server.yaml
            
            # 等待 Metrics Server 启动
            echo "Waiting for Metrics Server to be ready..."
            sleep 30
            
            # 检查状态
            kubectl wait --for=condition=available deployment/metrics-server -n kube-system --timeout=180s
            
            # 验证安装
            echo "=== Metrics Server Pods ==="
            kubectl get pods -n kube-system -l k8s-app=metrics-server
            
            echo "=== Metrics API Service ==="
            kubectl get apiservice v1beta1.metrics.k8s.io
            
            echo "✅ Metrics Server installed successfully"
          fi

  build-images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    if: needs.terraform-infrastructure.result == 'success'
    
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image_tag }}
      frontend_image: ${{ steps.build-frontend.outputs.image_tag }}
      community_image: ${{ steps.build-community.outputs.image_tag }}
      backend_image_tag: ${{ steps.build-backend.outputs.image_tag_only }}
      frontend_image_tag: ${{ steps.build-frontend.outputs.image_tag_only }}
      community_image_tag: ${{ steps.build-community.outputs.image_tag_only }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Get AWS Account ID and ECR Registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: 🔐 Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: 🔍 Set ECR URLs
        run: |
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          FRONTEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}"
          COMMUNITY_ECR_URL="${{ needs.terraform-infrastructure.outputs.community_ecr_url }}"
          
          if [ -z "$BACKEND_ECR_URL" ]; then
            echo "❌ ERROR: BACKEND_ECR_URL is required but empty"
            exit 1
          fi
          if [ -z "$FRONTEND_ECR_URL" ]; then
            echo "❌ ERROR: FRONTEND_ECR_URL is required but empty"
            exit 1
          fi
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "❌ ERROR: COMMUNITY_ECR_URL is required but empty"
            exit 1
          fi
          
          echo "BACKEND_ECR_URL=$BACKEND_ECR_URL" >> $GITHUB_ENV
          echo "FRONTEND_ECR_URL=$FRONTEND_ECR_URL" >> $GITHUB_ENV
          echo "COMMUNITY_ECR_URL=$COMMUNITY_ECR_URL" >> $GITHUB_ENV

      - name: 🏗 Check if Backend Image Exists
        id: check-backend
        run: |
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          if docker manifest inspect $BACKEND_IMAGE > /dev/null 2>&1; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
            echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
            echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT
          fi

      - name: 🧱 Build Backend Image (if needed)
        id: build-backend
        if: steps.check-backend.outputs.image_exists == 'false'
        run: |
          cd backend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing backend image: $BACKEND_IMAGE"
          docker build --no-cache -t $BACKEND_IMAGE .
          docker push $BACKEND_IMAGE
          echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 🎨 Build Frontend Image
        id: build-frontend
        run: |
          cd frontend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          FRONTEND_IMAGE="$FRONTEND_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing frontend image: $FRONTEND_IMAGE"
          docker build -t $FRONTEND_IMAGE .
          docker push $FRONTEND_IMAGE
          echo "image_tag=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 💬 Build Community Service Image
        id: build-community
        run: |
          cd community-service
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          COMMUNITY_IMAGE="$COMMUNITY_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing community service image: $COMMUNITY_IMAGE"
          docker build -t $COMMUNITY_IMAGE .
          docker push $COMMUNITY_IMAGE
          echo "image_tag=$COMMUNITY_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT

  configure-rds-database:
    name: "Configure RDS Database"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🗃 Create Namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 🧹 Clean Up Existing Database Jobs
        run: |
          kubectl delete job db-migration -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-db-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          sleep 5

      - name: 🔧 Process Secret Templates with sed
        run: |
          echo "=== 使用 sed 处理 Secret 模板 ==="
          
          # 获取实际值
          RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          
          # 确保 RDS_HOST 不包含端口号
          if [[ "$RDS_ENDPOINT" == *":"* ]]; then
            RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
            echo "⚠️  RDS_ENDPOINT 包含端口，提取纯主机名: $RDS_HOST"
          else
            RDS_HOST="$RDS_ENDPOINT"
          fi
          
          RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          RDS_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          # Community 数据库配置
          COMMUNITY_DB_USERNAME="${{ secrets.COMMUNITY_DB_USERNAME }}"
          COMMUNITY_DB_PASSWORD="${{ secrets.COMMUNITY_DB_PASSWORD }}"
          COMMUNITY_DB_NAME="${{ secrets.COMMUNITY_DB_NAME }}"
          
          # JWT 和 AWS 配置
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          COMMUNITY_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.community_role_arn }}"
          S3_BUCKET_NAME="${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}"
          AWS_REGION="${{ env.AWS_REGION }}"
          
          # 构建正确的 DATABASE_URL
          DATABASE_URL="postgresql://${RDS_USERNAME}:${RDS_PASSWORD}@${RDS_HOST}:${RDS_PORT}/${RDS_DATABASE}"
          COMMUNITY_DATABASE_URL="postgresql://${COMMUNITY_DB_USERNAME}:${COMMUNITY_DB_PASSWORD}@${RDS_HOST}:${RDS_PORT}/${COMMUNITY_DB_NAME}"
          
          echo "=== 实际配置值 ==="
          echo "RDS_ENDPOINT (原始): $RDS_ENDPOINT"
          echo "RDS_HOST (处理后): $RDS_HOST"
          echo "RDS_PORT: $RDS_PORT"
          echo "RDS_USERNAME: $RDS_USERNAME"
          echo "RDS_DATABASE: $RDS_DATABASE"
          echo "RDS_PASSWORD: [HIDDEN]"
          echo "COMMUNITY_DB_USERNAME: $COMMUNITY_DB_USERNAME"
          echo "COMMUNITY_DB_PASSWORD: [HIDDEN]"
          echo "COMMUNITY_DB_NAME: $COMMUNITY_DB_NAME"
          echo "AWS_REGION: $AWS_REGION"
          echo "S3_BUCKET_NAME: $S3_BUCKET_NAME"
          echo "DATABASE_URL: $DATABASE_URL"
          echo "COMMUNITY_DATABASE_URL: $COMMUNITY_DATABASE_URL"
          echo "=========================="
          
          cd k8s/configs
          
          # 处理所有 Secret 文件
          for file in *-secret.yaml; do
            echo "=== 处理文件: $file ==="
            echo "处理前内容:"
            cat "$file"
            
            # 备份原始文件
            cp "$file" "$file.bak"
            
            # 关键修复：确保 RDS_HOST 替换正确（不包含端口）
            sed -i "s|\\\${RDS_HOST}|$RDS_HOST|g" "$file"
            sed -i "s|\\\${RDS_PORT}|$RDS_PORT|g" "$file"
            sed -i "s|\\\${RDS_DATABASE}|$RDS_DATABASE|g" "$file"
            sed -i "s|\\\${RDS_USERNAME}|$RDS_USERNAME|g" "$file"
            sed -i "s|\\\${RDS_PASSWORD}|$RDS_PASSWORD|g" "$file"
            
            # 注意：RDS_ENDPOINT 也替换为 RDS_HOST，避免端口重复
            sed -i "s|\\\${RDS_ENDPOINT}|$RDS_HOST|g" "$file"
            
            # 替换 DATABASE_URL 变量
            sed -i "s|\\\${DATABASE_URL}|$DATABASE_URL|g" "$file"
            sed -i "s|\\\${COMMUNITY_DATABASE_URL}|$COMMUNITY_DATABASE_URL|g" "$file"
            
            # 替换 Community 数据库变量
            sed -i "s|\\\${COMMUNITY_DB_USERNAME}|$COMMUNITY_DB_USERNAME|g" "$file"
            sed -i "s|\\\${COMMUNITY_DB_PASSWORD}|$COMMUNITY_DB_PASSWORD|g" "$file"
            sed -i "s|\\\${COMMUNITY_DB_NAME}|$COMMUNITY_DB_NAME|g" "$file"
            
            # 替换 JWT 和 AWS 变量
            sed -i "s|\\\${JWT_SECRET}|$JWT_SECRET|g" "$file"
            sed -i "s|\\\${COMMUNITY_ROLE_ARN}|$COMMUNITY_ROLE_ARN|g" "$file"
            sed -i "s|\\\${S3_BUCKET_NAME}|$S3_BUCKET_NAME|g" "$file"
            sed -i "s|\\\${AWS_REGION}|$AWS_REGION|g" "$file"
            
            # 替换带引号的格式 "***${VARIABLE}***"
            sed -i "s|\"\\*\\*\\*\\\${RDS_ENDPOINT}\\*\\*\\*\"|\"${RDS_HOST}\"|g" "$file"
            sed -i "s|\"\\*\\*\\*\\\${RDS_PASSWORD}\\*\\*\\*\"|\"${RDS_PASSWORD}\"|g" "$file"
            sed -i "s|\"\\*\\*\\*\\\${COMMUNITY_DB_PASSWORD}\\*\\*\\*\"|\"${COMMUNITY_DB_PASSWORD}\"|g" "$file"
            sed -i "s|\"\\*\\*\\*\\\${DATABASE_URL}\\*\\*\\*\"|\"${DATABASE_URL}\"|g" "$file"
            sed -i "s|\"\\*\\*\\*\\\${COMMUNITY_DATABASE_URL}\\*\\*\\*\"|\"${COMMUNITY_DATABASE_URL}\"|g" "$file"
            
            echo "处理后内容:"
            cat "$file"
            echo "======================"
          done

      - name: 🔍 Verify Secret Processing
        run: |
          cd k8s/configs
          echo "=== 最终验证 ==="
          
          # 显示所有文件内容
          for file in *-secret.yaml; do
            echo "$file 内容:"
            cat "$file"
            echo ""
          done
          
          echo "=== 检查未替换的变量 ==="
          UNRESOLVED_COUNT=0
          for file in *-secret.yaml; do
            echo "检查文件: $file"
            if grep -n -E '\$\{[A-Z_]+\}' "$file"; then
              echo "❌ 在 $file 中发现未替换的变量"
              UNRESOLVED_COUNT=$((UNRESOLVED_COUNT + 1))
            else
              echo "✅ $file - 所有变量已替换"
            fi
          done
          
          if [ $UNRESOLVED_COUNT -gt 0 ]; then
            echo "❌ Secret 处理失败，存在 $UNRESOLVED_COUNT 个文件有未替换的变量"
            echo "=== 详细错误信息 ==="
            for file in *-secret.yaml; do
              if grep -n -E '\$\{[A-Z_]+\}' "$file"; then
                echo "文件 $file 中的未替换变量:"
                grep -n -E '\$\{[A-Z_]+\}' "$file"
              fi
            done
            exit 1
          else
            echo "✅ 所有 Secret 文件处理成功"
          fi

      - name: 🔍 Validate Secret Configuration
        run: |
          echo "=== 验证 Secret 配置 ==="
          
          # 验证 RDS_HOST 不包含端口号
          echo "=== 检查 RDS_HOST 配置 ==="
          RDS_HOST_CONTENT=$(kubectl get secret rds-secret -n comic-website -o jsonpath='{.data.host}' | base64 -d)
          if [[ "$RDS_HOST_CONTENT" == *":"* ]]; then
            echo "❌ 错误: RDS_HOST 包含端口号: $RDS_HOST_CONTENT"
            echo "RDS_HOST 应该只包含主机名，不包含端口"
            exit 1
          else
            echo "✅ RDS_HOST 配置正确: $RDS_HOST_CONTENT"
          fi
          
          # 验证 RDS_PORT 配置
          RDS_PORT_CONTENT=$(kubectl get secret rds-secret -n comic-website -o jsonpath='{.data.port}' | base64 -d)
          echo "✅ RDS_PORT 配置: $RDS_PORT_CONTENT"
          
          # 验证 DATABASE_URL 格式
          echo "=== 检查 DATABASE_URL 配置 ==="
          DATABASE_URL_CONTENT=$(kubectl get secret backend-secret -n comic-website -o jsonpath='{.data.database-url}' | base64 -d)
          echo "DATABASE_URL: $DATABASE_URL_CONTENT"
          
          # 验证端口在 DATABASE_URL 中只出现一次
          PORT_COUNT=$(echo "$DATABASE_URL_CONTENT" | grep -o ":5432" | wc -l)
          if [ "$PORT_COUNT" -gt 1 ]; then
            echo "❌ 错误: DATABASE_URL 中包含重复的端口号"
            exit 1
          else
            echo "✅ DATABASE_URL 端口配置正确"
          fi
          
          echo "✅ 所有 Secret 配置验证通过"

      - name: 🗃 Run Main Database Migrations
        run: |
          echo "🚀 运行主数据库迁移..."
          
          # 动态更新 migration job 的镜像标签
          BACKEND_IMAGE_TAG="${{ needs.build-images.outputs.backend_image_tag }}"
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$BACKEND_IMAGE_TAG"
          
          # 使用 sed 替换镜像占位符
          sed "s|PLACEHOLDER_BACKEND_IMAGE|$BACKEND_IMAGE|g" k8s/migrations/db-migration-job.yaml > k8s/migrations/db-migration-job-temp.yaml
          
          # 应用迁移 job
          kubectl apply -f k8s/migrations/db-migration-job-temp.yaml
          
          echo "等待数据库迁移完成..."
          if kubectl wait --for=condition=complete job/db-migration -n ${{ env.NAMESPACE }} --timeout=600s; then
            echo "✅ 数据库迁移成功"
            kubectl logs job/db-migration -n ${{ env.NAMESPACE }} --tail=20
            kubectl delete job db-migration -n ${{ env.NAMESPACE }}
            rm -f k8s/migrations/db-migration-job-temp.yaml
          else
            echo "❌ 数据库迁移失败或超时"
            echo "=== 迁移 Pod 日志 ==="
            kubectl logs job/db-migration -n ${{ env.NAMESPACE }} --tail=50
            echo "=== 迁移 Pod 状态 ==="
            kubectl describe job db-migration -n ${{ env.NAMESPACE }}
            kubectl get pods -n ${{ env.NAMESPACE }} -l job-name=db-migration
            rm -f k8s/migrations/db-migration-job-temp.yaml
            exit 1
          fi

      - name: 🗃 Create Community Database
        run: |
          echo "🚀 创建 Community 数据库..."
          
          # 动态更新 community migration job 的镜像标签
          BACKEND_IMAGE_TAG="${{ needs.build-images.outputs.backend_image_tag }}"
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$BACKEND_IMAGE_TAG"
          
          # 使用 sed 替换镜像占位符
          sed "s|PLACEHOLDER_BACKEND_IMAGE|$BACKEND_IMAGE|g" k8s/migrations/community-schema-job.yaml > k8s/migrations/community-schema-job-temp.yaml
          
          # 应用 community migration job
          kubectl apply -f k8s/migrations/community-schema-job-temp.yaml

          echo "等待 Community 数据库创建完成..."
          if kubectl wait --for=condition=complete job/community-db-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "✅ Community 数据库创建成功"
            kubectl delete job community-db-setup -n ${{ env.NAMESPACE }}
          else
            echo "❌ Community 数据库创建失败"
            kubectl logs job/community-db-setup -n ${{ env.NAMESPACE }} --tail=50
            rm -f k8s/migrations/community-schema-job-temp.yaml
            exit 1
          fi
          
          echo "等待 Community schema 设置完成..."
          if kubectl wait --for=condition=complete job/community-schema-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "✅ Community schema 设置成功"
            kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }}
            rm -f k8s/migrations/community-schema-job-temp.yaml
          else
            echo "❌ Community schema 设置失败"
            kubectl logs job/community-schema-setup -n ${{ env.NAMESPACE }} --tail=50
            rm -f k8s/migrations/community-schema-job-temp.yaml
            exit 1
          fi

      - name: ✅ Verify Database Configuration
        run: |
          echo "✅ 数据库配置完成"

  deploy-frontend:
    name: "Deploy Frontend Service to EKS"
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-images, configure-rds-database]
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: ☸️ Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: 🚀 Deploy Frontend
        run: |
          cd k8s
          
          echo "=== 应用命名空间 ==="
          kubectl apply -f namespaces/comic-website.yaml
          
          echo "=== 应用 Service Accounts ==="
          kubectl apply -f service-accounts/
          
          echo "=== 应用 ConfigMaps ==="
          kubectl apply -f configs/backend-config.yaml
          kubectl apply -f configs/community-config.yaml
          kubectl apply -f configs/frontend-config.yaml
          
          echo "=== 应用处理后的 Secrets ==="
          kubectl apply -f configs/rds-secret.yaml
          kubectl apply -f configs/backend-secret.yaml
          kubectl apply -f configs/community-db-secret.yaml
          kubectl apply -f configs/auth-secret.yaml
          kubectl apply -f configs/community-secret.yaml
          kubectl apply -f configs/s3-secret.yaml
          
          echo "=== 应用 Deployments ==="
          kubectl apply -f deployments/
          
          echo "=== 应用 Services ==="
          kubectl apply -f service/
          
          echo "=== 应用网络配置 ==="
          kubectl apply -f networking/
          
          echo "✅ 所有资源部署完成"
      - name: 🔄 Update Frontend Image
        run: |
          FRONTEND_IMAGE="${{ needs.build-images.outputs.frontend_image }}"
          kubectl set image deployment/frontend-deployment -n ${{ env.NAMESPACE }} frontend=$FRONTEND_IMAGE
      - name: ⏳ Wait for Frontend Deployment
        run: kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=180s

  deploy-backend:
    name: "Deploy Backend Service to EKS"
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-images, configure-rds-database, deploy-frontend]
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: ☸️ Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      
      - name: 🔄 Update Backend Deployment with Latest Image
        run: |
          BACKEND_IMAGE="${{ needs.build-images.outputs.backend_image }}"
          kubectl set image deployment/backend-deployment -n ${{ env.NAMESPACE }} backend=$BACKEND_IMAGE
      
      - name: ⏳ Wait for Backend Deployment
        run: kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} --timeout=300s

  deploy-community:
    name: "Deploy Community Service to EKS"
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-images, configure-rds-database, deploy-backend]
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: ☸️ Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      
      - name: 🔄 Update Community Deployment with Latest Image
        run: |
          COMMUNITY_IMAGE="${{ needs.build-images.outputs.community_image }}"
          kubectl set image deployment/community-deployment -n ${{ env.NAMESPACE }} community-service=$COMMUNITY_IMAGE
      
      - name: ⏳ Wait for Community Deployment
        run: kubectl rollout status deployment/community-deployment -n ${{ env.NAMESPACE }} --timeout=180s
      
      - name: 🌐 Get ALB URL
        id: get-alb-url
        run: |
          for i in {1..15}; do
            ALB_HOSTNAME=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALB_HOSTNAME" ]; then
              echo "alb_url=http://$ALB_HOSTNAME" >> $GITHUB_OUTPUT
              break
            else
              sleep 20
            fi
          done
      
      - name: 📢 Display Application URL
        run: |
          echo "================================================"
          echo "🚀 All Services Deployed Successfully!"
          echo "================================================"
          echo "🌐 Access URL: ${{ steps.get-alb-url.outputs.alb_url }}"
          echo "📊 Services Status:"
          echo "   ✅ Frontend Service: Ready"
          echo "   ✅ Backend API Service: Ready" 
          echo "   ✅ Community Service: Ready"
          echo "   ✅ Database Configuration: Complete"
          echo "   ✅ Database Migrations: Complete"
          echo "🎉 Application is fully operational!"
          echo "================================================"