name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend_ecr_url: ${{ steps.terraform-outputs.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.terraform-outputs.outputs.frontend_ecr_url }}
      community_ecr_url: ${{ steps.terraform-outputs.outputs.community_ecr_url }}
      rds_endpoint: ${{ steps.terraform-outputs.outputs.rds_endpoint }}
      rds_port: ${{ steps.terraform-outputs.outputs.rds_port }}
      rds_username: ${{ steps.terraform-outputs.outputs.rds_username }}
      rds_database: ${{ steps.terraform-outputs.outputs.rds_database }}
      s3_bucket_name: ${{ steps.terraform-outputs.outputs.s3_bucket_name }}
      s3_bucket_region: ${{ steps.terraform-outputs.outputs.s3_bucket_region }}
      alb_controller_role_arn: ${{ steps.terraform-outputs.outputs.alb_controller_role_arn }}
      backend_role_arn: ${{ steps.terraform-outputs.outputs.backend_role_arn }}
      frontend_role_arn: ${{ steps.terraform-outputs.outputs.frontend_role_arn }}
      community_role_arn: ${{ steps.terraform-outputs.outputs.community_role_arn }}
      alb_url: ${{ steps.terraform-outputs.outputs.alb_url }}
      redis_host: ${{ steps.terraform-outputs.outputs.redis_host }}
      redis_port: ${{ steps.terraform-outputs.outputs.redis_port }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ⚙️ Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ✅ Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: 🚀 Terraform Plan and Apply
        run: |
          cd terraform
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="community_db_password=${{ secrets.COMMUNITY_DB_PASSWORD }}" \
            -var="community_db_username=${{ secrets.COMMUNITY_DB_USERNAME }}" \
            -var="community_db_name=${{ secrets.COMMUNITY_DB_NAME }}"
          terraform apply -auto-approve tfplan

      - name: 📋 Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          terraform output -json > outputs.json
          
          BACKEND_ECR_URL=$(jq -r '.backend_repository_url.value // empty' outputs.json)
          FRONTEND_ECR_URL=$(jq -r '.frontend_repository_url.value // empty' outputs.json)
          COMMUNITY_ECR_URL=$(jq -r '.community_repository_url.value // empty' outputs.json)
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value // empty' outputs.json)
          RDS_PORT=$(jq -r '.rds_port.value // "5432"' outputs.json)
          RDS_USERNAME=$(jq -r '.rds_username.value // "comicadmin"' outputs.json)
          RDS_DATABASE=$(jq -r '.rds_database_name.value // "comicdb"' outputs.json)
          S3_BUCKET_NAME=$(jq -r '.s3_bucket_name.value // empty' outputs.json)
          S3_BUCKET_REGION=$(jq -r '.s3_bucket_region.value // empty' outputs.json)
          ALB_CONTROLLER_ROLE_ARN=$(jq -r '.alb_controller_role_arn.value // empty' outputs.json)
          BACKEND_ROLE_ARN=$(jq -r '.backend_role_arn.value // empty' outputs.json)
          FRONTEND_ROLE_ARN=$(jq -r '.frontend_role_arn.value // empty' outputs.json)
          COMMUNITY_ROLE_ARN=$(jq -r '.community_role_arn.value // empty' outputs.json)
          ALB_URL=$(jq -r '.alb_url.value // empty' outputs.json)
          REDIS_HOST=$(jq -r '.redis_host.value // "redis-master.comic-website.svc.cluster.local"' outputs.json)
          REDIS_PORT=$(jq -r '.redis_port.value // "6379"' outputs.json)
          
          echo "backend_ecr_url=$BACKEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "frontend_ecr_url=$FRONTEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "community_ecr_url=$COMMUNITY_ECR_URL" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "rds_port=$RDS_PORT" >> $GITHUB_OUTPUT
          echo "rds_username=$RDS_USERNAME" >> $GITHUB_OUTPUT
          echo "rds_database=$RDS_DATABASE" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket_region=$S3_BUCKET_REGION" >> $GITHUB_OUTPUT
          echo "alb_controller_role_arn=$ALB_CONTROLLER_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "backend_role_arn=$BACKEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "frontend_role_arn=$FRONTEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "community_role_arn=$COMMUNITY_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT
          echo "redis_port=$REDIS_PORT" >> $GITHUB_OUTPUT

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 📊 Install Metrics Server
        run: |
          if ! kubectl get deployment metrics-server -n kube-system > /dev/null 2>&1; then
            kubectl apply -f k8s/monitoring/metrics-server.yaml
            kubectl wait --for=condition=available deployment/metrics-server -n kube-system --timeout=180s
          fi

  build-images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    if: needs.terraform-infrastructure.result == 'success'
    
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image_tag }}
      frontend_image: ${{ steps.build-frontend.outputs.image_tag }}
      community_image: ${{ steps.build-community.outputs.image_tag }}
      backend_image_tag: ${{ steps.build-backend.outputs.image_tag_only }}
      frontend_image_tag: ${{ steps.build-frontend.outputs.image_tag_only }}
      community_image_tag: ${{ steps.build-community.outputs.image_tag_only }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}

      - name: 🧱 Build Backend Image
        id: build-backend
        run: |
          cd backend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}:$IMAGE_TAG"
          docker build --no-cache -t $BACKEND_IMAGE .
          docker push $BACKEND_IMAGE
          echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 🎨 Build Frontend Image
        id: build-frontend
        run: |
          cd frontend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          FRONTEND_IMAGE="${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}:$IMAGE_TAG"
          docker build -t $FRONTEND_IMAGE .
          docker push $FRONTEND_IMAGE
          echo "image_tag=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 💬 Build Community Service Image
        id: build-community
        run: |
          cd community-service
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          COMMUNITY_IMAGE="${{ needs.terraform-infrastructure.outputs.community_ecr_url }}:$IMAGE_TAG"
          docker build -t $COMMUNITY_IMAGE .
          docker push $COMMUNITY_IMAGE
          echo "image_tag=$COMMUNITY_IMAGE" >> $GITHUB_OUTPUT
          echo "image_tag_only=$IMAGE_TAG" >> $GITHUB_OUTPUT

  configure-rds-database:
    name: "Configure RDS Database"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🗃 Create Namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 🧹 Clean Up Existing Jobs
        run: |
          kubectl delete job db-migration -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-db-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true

      - name: 🗂 Create Kubernetes Secrets
        run: |
          RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
          RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          
          # RDS Secret
          kubectl create secret generic rds-secret \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=host="$RDS_HOST" \
            --from-literal=port="$RDS_PORT" \
            --from-literal=username="$RDS_USERNAME" \
            --from-literal=password="${{ secrets.DB_PASSWORD }}" \
            --from-literal=database="$RDS_DATABASE" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Backend Secret
          DATABASE_URL="postgresql://$RDS_USERNAME:${{ secrets.DB_PASSWORD }}@$RDS_HOST:$RDS_PORT/$RDS_DATABASE"
          kubectl create secret generic backend-secret \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --from-literal=database-url="$DATABASE_URL" \
            --from-literal=community-db-password="${{ secrets.COMMUNITY_DB_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Community DB Secret
          COMMUNITY_DATABASE_URL="postgresql://${{ secrets.COMMUNITY_DB_USERNAME }}:${{ secrets.COMMUNITY_DB_PASSWORD }}@$RDS_HOST:$RDS_PORT/${{ secrets.COMMUNITY_DB_NAME }}"
          kubectl create secret generic community-db-secret \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=database-url="$COMMUNITY_DATABASE_URL" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Auth Secret
          kubectl create secret generic auth-secret \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # S3 Secret
          kubectl create secret generic s3-secret \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=bucket-name="${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}" \
            --from-literal=aws-region="${{ env.AWS_REGION }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Community Secret
          kubectl create secret generic community-secret \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=role-arn="${{ needs.terraform-infrastructure.outputs.community_role_arn }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: 🗃 Run Main Database Migrations
        run: |
          BACKEND_IMAGE_TAG="${{ needs.build-images.outputs.backend_image_tag }}"
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$BACKEND_IMAGE_TAG"
          
          sed "s|PLACEHOLDER_BACKEND_IMAGE|$BACKEND_IMAGE|g" k8s/migrations/db-migration-job.yaml | kubectl apply -f -
          
          if kubectl wait --for=condition=complete job/db-migration -n ${{ env.NAMESPACE }} --timeout=600s; then
            kubectl delete job db-migration -n ${{ env.NAMESPACE }}
          else
            kubectl logs job/db-migration -n ${{ env.NAMESPACE }} --tail=50
            exit 1
          fi

      - name: 🗃 Create Community Database
        run: |
          BACKEND_IMAGE_TAG="${{ needs.build-images.outputs.backend_image_tag }}"
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$BACKEND_IMAGE_TAG"
          
          sed "s|PLACEHOLDER_BACKEND_IMAGE|$BACKEND_IMAGE|g" k8s/migrations/community-schema-job.yaml | kubectl apply -f -

          if kubectl wait --for=condition=complete job/community-db-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            kubectl delete job community-db-setup -n ${{ env.NAMESPACE }}
          else
            exit 1
          fi
          
          if kubectl wait --for=condition=complete job/community-schema-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }}
          else
            exit 1
          fi

  deploy-frontend:
    name: "Deploy Frontend Service to EKS"
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-images, configure-rds-database]
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: ☸️ Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      - name: 🚀 Deploy Frontend Resources
        run: |
          cd k8s
          kubectl apply -f namespaces/comic-website.yaml
          kubectl apply -f service-accounts/frontend-service-account.yaml
          kubectl apply -f configs/frontend-config.yaml
          kubectl apply -f service/frontend-service.yaml
          kubectl apply -f networking/alb-ingress-class.yaml
          kubectl apply -f networking/alb-ingress.yaml
          kubectl apply -f deployments/frontend-deployment.yaml
      - name: 🔄 Update Frontend Image
        run: |
          FRONTEND_IMAGE="${{ needs.build-images.outputs.frontend_image }}"
          kubectl set image deployment/frontend-deployment -n ${{ env.NAMESPACE }} frontend=$FRONTEND_IMAGE
      - name: ⏳ Wait for Frontend Deployment
        run: kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=180s

  deploy-backend:
    name: "Deploy Backend Service to EKS"
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-images, configure-rds-database, deploy-frontend]
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: ☸️ Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      
      - name: 🚀 Deploy Backend Resources
        run: |
          cd k8s
          kubectl apply -f service-accounts/backend-service-account.yaml
          kubectl apply -f service/backend-service.yaml
          kubectl apply -f deployments/backend-deployment.yaml
      
      - name: 🔄 Update Backend Image
        run: |
          BACKEND_IMAGE="${{ needs.build-images.outputs.backend_image }}"
          kubectl set image deployment/backend-deployment -n ${{ env.NAMESPACE }} backend=$BACKEND_IMAGE
      
      - name: ⏳ Wait for Backend Deployment
        run: kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} --timeout=300s

  deploy-community:
    name: "Deploy Community Service to EKS"
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-images, configure-rds-database, deploy-backend]
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: ☸️ Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
      
      - name: 🚀 Deploy Community Resources
        run: |
          cd k8s
          kubectl apply -f service-accounts/community-service-account.yaml
          kubectl apply -f service/community-service.yaml
          kubectl apply -f deployments/community-deployment.yaml
      
      - name: 🔄 Update Community Image
        run: |
          COMMUNITY_IMAGE="${{ needs.build-images.outputs.community_image }}"
          kubectl set image deployment/community-deployment -n ${{ env.NAMESPACE }} community-service=$COMMUNITY_IMAGE
      
      - name: ⏳ Wait for Community Deployment
        run: kubectl rollout status deployment/community-deployment -n ${{ env.NAMESPACE }} --timeout=180s
      
      - name: 🌐 Get ALB URL
        id: get-alb-url
        run: |
          for i in {1..15}; do
            ALB_HOSTNAME=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALB_HOSTNAME" ]; then
              echo "alb_url=http://$ALB_HOSTNAME" >> $GITHUB_OUTPUT
              break
            else
              sleep 20
            fi
          done
      
      - name: 📢 Display Application URL
        run: |
          echo "================================================"
          echo "🚀 All Services Deployed Successfully!"
          echo "================================================"
          echo "🌐 Access URL: ${{ steps.get-alb-url.outputs.alb_url }}"
          echo "📊 Services Status:"
          echo "   ✅ Frontend Service: Ready"
          echo "   ✅ Backend API Service: Ready" 
          echo "   ✅ Community Service: Ready"
          echo "   ✅ Database Configuration: Complete"
          echo "   ✅ Database Migrations: Complete"
          echo "🎉 Application is fully operational!"
          echo "================================================"