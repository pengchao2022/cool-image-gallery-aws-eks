name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üèó Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ‚öôÔ∏è Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ‚úÖ Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: üöÄ Terraform Plan and Apply
        run: |
          cd terraform
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"
          terraform apply -auto-approve tfplan

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: üß† Install or Upgrade ALB Ingress Controller
        run: |
          set -e
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          VPC_ID=$(aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION --query "cluster.resourcesVpcConfig.vpcId" --output text)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          cat <<EOF > alb-serviceaccount.yaml
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-load-balancer-controller
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::$ACCOUNT_ID:role/AmazonEKSLoadBalancerControllerRole-$CLUSTER_NAME
          EOF

          kubectl apply -f alb-serviceaccount.yaml

          cat <<EOF > alb-values.yaml
          clusterName: $CLUSTER_NAME
          region: $AWS_REGION
          vpcId: $VPC_ID
          serviceAccount:
            create: false
            name: aws-load-balancer-controller
          EOF

          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            -f alb-values.yaml \
            --version 1.6.1 \
            --wait

  deploy-applications:
    name: "Deploy Applications to EKS"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: üîç Get AWS Account ID
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: üèó Ensure ECR repositories exist
        run: |
          for repo in comic-website-backend comic-website-frontend; do
            if ! aws ecr describe-repositories --repository-names $repo --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              echo "ü™£ Creating ECR repository: $repo"
              aws ecr create-repository --repository-name $repo --region ${{ env.AWS_REGION }}
            else
              echo "‚úÖ ECR repository $repo already exists"
            fi
          done

      - name: üîê Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
          | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: üß± Build and Push Backend Image
        run: |
          cd backend
          docker build -t $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/comic-website-backend:${GITHUB_SHA:0:8} .
          docker push $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/comic-website-backend:${GITHUB_SHA:0:8}

      - name: üé® Build and Push Frontend Image
        run: |
          cd frontend
          docker build -t $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/comic-website-frontend:${GITHUB_SHA:0:8} .
          docker push $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/comic-website-frontend:${GITHUB_SHA:0:8}

      - name: üîë Apply Kubernetes Secrets
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          cat <<EOF > rds-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: rds-secret
            namespace: ${{ env.NAMESPACE }}
          type: Opaque
          stringData:
            host: localhost
            port: '5432'
            username: comicadmin
            database: comicdb
            password: ${{ secrets.DB_PASSWORD }}
          EOF

          kubectl apply -f rds-secret.yaml
          rm rds-secret.yaml

      - name: üöÄ Deploy using Kustomize
        run: |
          echo "üöÄ Applying all manifests using Kustomize..."
          cd k8s
          kubectl apply -k . --namespace ${{ env.NAMESPACE }}

          echo "üîß Patching deployments with new image versions..."
          BACKEND_IMAGE=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/comic-website-backend:${GITHUB_SHA:0:8}
          FRONTEND_IMAGE=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/comic-website-frontend:${GITHUB_SHA:0:8}

          kubectl set image deployment/backend-deployment backend-container=$BACKEND_IMAGE -n ${{ env.NAMESPACE }} || true
          kubectl set image deployment/frontend-deployment frontend-container=$FRONTEND_IMAGE -n ${{ env.NAMESPACE }} || true

      - name: üîç Verify Deployment
        run: |
          echo "üîé Checking deployment status..."
          kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} || true
          kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} || true
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get svc -n ${{ env.NAMESPACE }}
          kubectl get ingress -n ${{ env.NAMESPACE }}
