name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend_ecr_url: ${{ steps.terraform-outputs.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.terraform-outputs.outputs.frontend_ecr_url }}
      community_ecr_url: ${{ steps.terraform-outputs.outputs.community_ecr_url }}
      rds_endpoint: ${{ steps.terraform-outputs.outputs.rds_endpoint }}
      rds_port: ${{ steps.terraform-outputs.outputs.rds_port }}
      rds_username: ${{ steps.terraform-outputs.outputs.rds_username }}
      rds_database: ${{ steps.terraform-outputs.outputs.rds_database }}
      s3_bucket_name: ${{ steps.terraform-outputs.outputs.s3_bucket_name }}
      s3_bucket_region: ${{ steps.terraform-outputs.outputs.s3_bucket_region }}
      alb_controller_role_arn: ${{ steps.terraform-outputs.outputs.alb_controller_role_arn }}
      backend_role_arn: ${{ steps.terraform-outputs.outputs.backend_role_arn }}
      frontend_role_arn: ${{ steps.terraform-outputs.outputs.frontend_role_arn }}
      community_role_arn: ${{ steps.terraform-outputs.outputs.community_role_arn }}
      alb_url: ${{ steps.terraform-outputs.outputs.alb_url }}
      # Redis ÈÖçÁΩÆËæìÂá∫
      redis_host: ${{ steps.terraform-outputs.outputs.redis_host }}
      redis_port: ${{ steps.terraform-outputs.outputs.redis_port }}
      # Êñ∞Â¢û Community Êï∞ÊçÆÂ∫ìËæìÂá∫
      community_database_name: ${{ steps.terraform-outputs.outputs.community_database_name }}
      community_database_username: ${{ steps.terraform-outputs.outputs.community_database_username }}

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üèó Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ‚öôÔ∏è Terraform Init
        run: |
          cd terraform
          echo "üîß Initializing Terraform with backend bucket: ${{ env.TF_BACKEND_BUCKET }}"
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ‚úÖ Terraform Validate
        run: |
          cd terraform
          echo "üîç Validating Terraform configuration..."
          terraform validate

      - name: üöÄ Terraform Plan and Apply
        run: |
          cd terraform
          echo "üìã Creating Terraform plan..."
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="community_db_password=${{ secrets.COMMUNITY_DB_PASSWORD }}" \
            -var="community_db_username=${{ secrets.COMMUNITY_DB_USERNAME }}" \
            -var="community_db_name=${{ secrets.COMMUNITY_DB_NAME }}"
          
          echo "üöÄ Applying Terraform configuration..."
          terraform apply -auto-approve tfplan

      - name: üìã Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "üìä Getting Terraform outputs..."
          terraform output -json > outputs.json
          
          # Ë∞ÉËØïÔºöËæìÂá∫ÊâÄÊúâ Terraform ËæìÂá∫
          echo "=== üîç TERRAFORM OUTPUTS DEBUG INFO ==="
          cat outputs.json
          echo "=== END TERRAFORM OUTPUTS ==="
          
          BACKEND_ECR_URL=$(jq -r '.backend_repository_url.value // empty' outputs.json)
          FRONTEND_ECR_URL=$(jq -r '.frontend_repository_url.value // empty' outputs.json)
          COMMUNITY_ECR_URL=$(jq -r '.community_repository_url.value // empty' outputs.json)
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value // empty' outputs.json)
          RDS_PORT=$(jq -r '.rds_port.value // "5432"' outputs.json)
          RDS_USERNAME=$(jq -r '.rds_username.value // "comicadmin"' outputs.json)
          RDS_DATABASE=$(jq -r '.rds_database_name.value // "comicdb"' outputs.json)
          S3_BUCKET_NAME=$(jq -r '.s3_bucket_name.value // empty' outputs.json)
          S3_BUCKET_REGION=$(jq -r '.s3_bucket_region.value // empty' outputs.json)
          ALB_CONTROLLER_ROLE_ARN=$(jq -r '.alb_controller_role_arn.value // empty' outputs.json)
          BACKEND_ROLE_ARN=$(jq -r '.backend_role_arn.value // empty' outputs.json)
          FRONTEND_ROLE_ARN=$(jq -r '.frontend_role_arn.value // empty' outputs.json)
          COMMUNITY_ROLE_ARN=$(jq -r '.community_role_arn.value // empty' outputs.json)
          ALB_URL=$(jq -r '.alb_url.value // empty' outputs.json)
          
          # Redis ËæìÂá∫
          REDIS_HOST=$(jq -r '.redis_host.value // "redis-master.comic-website.svc.cluster.local"' outputs.json)
          REDIS_PORT=$(jq -r '.redis_port.value // "6379"' outputs.json)
          
          # ‰ΩøÁî®Á°¨ÁºñÁ†ÅÁöÑ Community Êï∞ÊçÆÂ∫ì‰ø°ÊÅØ
          COMMUNITY_DB_NAME="communitydb"
          COMMUNITY_DB_USERNAME="community_user"
          
          # Ë∞ÉËØïÔºöËæìÂá∫ÂÖ≥ÈîÆÂèòÈáè
          echo "=== üîç KEY OUTPUT VARIABLES ==="
          echo "BACKEND_ECR_URL: $BACKEND_ECR_URL"
          echo "FRONTEND_ECR_URL: $FRONTEND_ECR_URL"
          echo "COMMUNITY_ECR_URL: $COMMUNITY_ECR_URL"
          echo "RDS_ENDPOINT: $RDS_ENDPOINT"
          echo "REDIS_HOST: $REDIS_HOST"
          echo "=== END KEY VARIABLES ==="
          
          # Â¶ÇÊûú community_ecr_url ‰∏∫Á©∫Ôºå‰ΩøÁî® backend_ecr_url ‰Ωú‰∏∫Â§áÁî®
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "‚ö†Ô∏è WARNING: COMMUNITY_ECR_URL is empty, using BACKEND_ECR_URL as fallback"
            COMMUNITY_ECR_URL="$BACKEND_ECR_URL"
          fi
          
          echo "backend_ecr_url=$BACKEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "frontend_ecr_url=$FRONTEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "community_ecr_url=$COMMUNITY_ECR_URL" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "rds_port=$RDS_PORT" >> $GITHUB_OUTPUT
          echo "rds_username=$RDS_USERNAME" >> $GITHUB_OUTPUT
          echo "rds_database=$RDS_DATABASE" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket_region=$S3_BUCKET_REGION" >> $GITHUB_OUTPUT
          echo "alb_controller_role_arn=$ALB_CONTROLLER_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "backend_role_arn=$BACKEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "frontend_role_arn=$FRONTEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "community_role_arn=$COMMUNITY_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT
          echo "redis_port=$REDIS_PORT" >> $GITHUB_OUTPUT
          
          # ‰ΩøÁî®Á°¨ÁºñÁ†ÅÂÄº
          echo "community_database_name=$COMMUNITY_DB_NAME" >> $GITHUB_OUTPUT
          echo "community_database_username=$COMMUNITY_DB_USERNAME" >> $GITHUB_OUTPUT

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          echo "üîß Updating kubeconfig for EKS cluster: ${{ env.CLUSTER_NAME }}"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

  build-images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    if: needs.terraform-infrastructure.result == 'success'
    
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image_tag }}
      frontend_image: ${{ steps.build-frontend.outputs.image_tag }}
      community_image: ${{ steps.build-community.outputs.image_tag }}

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîç Get AWS Account ID and ECR Registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "üîç AWS Account ID: $ACCOUNT_ID"
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "üîç ECR Registry: $ECR_REGISTRY"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: üîê Login to ECR
        run: |
          echo "üîê Logging into ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: üîç Set ECR URLs with Debug Info
        run: |
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          FRONTEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}"
          COMMUNITY_ECR_URL="${{ needs.terraform-infrastructure.outputs.community_ecr_url }}"
          
          echo "=== üîç ECR URLS DEBUG INFO ==="
          echo "BACKEND_ECR_URL from outputs: $BACKEND_ECR_URL"
          echo "FRONTEND_ECR_URL from outputs: $FRONTEND_ECR_URL"
          echo "COMMUNITY_ECR_URL from outputs: $COMMUNITY_ECR_URL"
          echo "=== END ECR URLS DEBUG ==="
          
          # Â¶ÇÊûú community_ecr_url ‰∏∫Á©∫Ôºå‰ΩøÁî® backend_ecr_url
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "‚ö†Ô∏è WARNING: COMMUNITY_ECR_URL is empty, using BACKEND_ECR_URL as fallback"
            COMMUNITY_ECR_URL="$BACKEND_ECR_URL"
          fi
          
          # È™åËØÅÊâÄÊúâ ECR URLs ÈÉΩ‰∏ç‰∏∫Á©∫
          if [ -z "$BACKEND_ECR_URL" ]; then
            echo "‚ùå ERROR: BACKEND_ECR_URL is empty!"
            exit 1
          fi
          if [ -z "$FRONTEND_ECR_URL" ]; then
            echo "‚ùå ERROR: FRONTEND_ECR_URL is empty!"
            exit 1
          fi
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "‚ùå ERROR: COMMUNITY_ECR_URL is empty even after fallback!"
            exit 1
          fi
          
          echo "BACKEND_ECR_URL=$BACKEND_ECR_URL" >> $GITHUB_ENV
          echo "FRONTEND_ECR_URL=$FRONTEND_ECR_URL" >> $GITHUB_ENV
          echo "COMMUNITY_ECR_URL=$COMMUNITY_ECR_URL" >> $GITHUB_ENV
          
          echo "‚úÖ Final ECR URLs:"
          echo "Backend: $BACKEND_ECR_URL"
          echo "Frontend: $FRONTEND_ECR_URL"
          echo "Community: $COMMUNITY_ECR_URL"

      - name: üèó Check if Backend Image Exists
        id: check-backend
        run: |
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          echo "üîç Checking if backend image exists: $BACKEND_IMAGE"
          if docker manifest inspect $BACKEND_IMAGE > /dev/null 2>&1; then
            echo "‚úÖ Backend image already exists"
            echo "image_exists=true" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Backend image does not exist, will build new image"
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          fi

      - name: üß± Build Backend Image (if needed)
        id: build-backend
        if: steps.check-backend.outputs.image_exists == 'false'
        run: |
          cd backend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          echo "üèó Building and pushing backend image: $BACKEND_IMAGE"
          docker build -t $BACKEND_IMAGE .
          echo "üì§ Pushing backend image to ECR..."
          docker push $BACKEND_IMAGE
          echo "‚úÖ Backend image pushed successfully"
          echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT

      - name: üé® Build Frontend Image
        id: build-frontend
        run: |
          cd frontend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          FRONTEND_IMAGE="$FRONTEND_ECR_URL:$IMAGE_TAG"
          echo "üé® Building and pushing frontend image: $FRONTEND_IMAGE"
          docker build -t $FRONTEND_IMAGE .
          echo "üì§ Pushing frontend image to ECR..."
          docker push $FRONTEND_IMAGE
          echo "‚úÖ Frontend image pushed successfully"
          echo "image_tag=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT

      - name: üí¨ Build Community Service Image
        id: build-community
        run: |
          cd community-service
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          COMMUNITY_IMAGE="$COMMUNITY_ECR_URL:$IMAGE_TAG"
          
          echo "=== üîç COMMUNITY IMAGE BUILD DEBUG ==="
          echo "COMMUNITY_ECR_URL: $COMMUNITY_ECR_URL"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "FULL_IMAGE_TAG: $COMMUNITY_IMAGE"
          echo "=== END DEBUG ==="
          
          # È™åËØÅÈïúÂÉèÊ†áÁ≠æÊ†ºÂºè
          if [[ -z "$COMMUNITY_ECR_URL" ]]; then
            echo "‚ùå ERROR: COMMUNITY_ECR_URL is empty!"
            exit 1
          fi
          
          if [[ ! "$COMMUNITY_IMAGE" =~ ^[a-zA-Z0-9./:-]+:[a-zA-Z0-9.-]+$ ]]; then
            echo "‚ùå ERROR: Invalid image tag format: $COMMUNITY_IMAGE"
            exit 1
          fi
          
          echo "üí¨ Building and pushing community service image: $COMMUNITY_IMAGE"
          docker build -t $COMMUNITY_IMAGE .
          echo "üì§ Pushing community image to ECR..."
          docker push $COMMUNITY_IMAGE
          echo "‚úÖ Community image pushed successfully"
          echo "image_tag=$COMMUNITY_IMAGE" >> $GITHUB_OUTPUT

  configure-rds-database:
    name: "Configure RDS Database"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          echo "üîß Updating kubeconfig for EKS cluster"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          echo "üîß Installing kubectl..."
          sudo snap install kubectl --classic

      - name: üóÉ Create Namespace
        run: |
          echo "üìÅ Creating namespace: ${{ env.NAMESPACE }}"
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: üßπ Clean Up Existing Database Jobs
        run: |
          echo "üßπ Cleaning up existing database jobs..."
          kubectl delete job db-migration -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-db-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          sleep 5
          echo "‚úÖ Cleanup completed"

      - name: üîß Update Kubernetes Secrets for Database
        run: |
          export RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          export RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          export RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          export RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
          export RDS_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          echo "=== üîç DATABASE CONFIG DEBUG ==="
          echo "RDS_ENDPOINT: $RDS_ENDPOINT"
          echo "RDS_HOST: $RDS_HOST"
          echo "RDS_PORT: $RDS_PORT"
          echo "RDS_USERNAME: $RDS_USERNAME"
          echo "RDS_DATABASE: $RDS_DATABASE"
          echo "=== END DEBUG ==="
          
          # Êñ∞Â¢û Community Êï∞ÊçÆÂ∫ìÁéØÂ¢ÉÂèòÈáè
          export COMMUNITY_DB_NAME="communitydb"
          export COMMUNITY_DB_USERNAME="community_user"
          export COMMUNITY_DB_PASSWORD="${{ secrets.COMMUNITY_DB_PASSWORD }}"
          export COMMUNITY_JWT_SECRET="${{ secrets.COMMUNITY_JWT_SECRET }}"
          
          echo "üîß Updating database secrets..."
          envsubst < k8s/configs/rds-secret.yaml > k8s/configs/rds-secret.yaml.tmp
          mv k8s/configs/rds-secret.yaml.tmp k8s/configs/rds-secret.yaml
          
          envsubst < k8s/configs/backend-secret.yaml > k8s/configs/backend-secret.yaml.tmp
          mv k8s/configs/backend-secret.yaml.tmp k8s/configs/backend-secret.yaml

      - name: üöÄ Apply Database Secrets
        run: |
          cd k8s
          echo "üîê Applying database secrets..."
          kubectl apply -f configs/rds-secret.yaml
          kubectl apply -f configs/backend-secret.yaml

      - name: üóÉ Run Main Database Migrations
        run: |
          BACKEND_IMAGE="${{ needs.build-images.outputs.backend_image }}"
          echo "üîÑ Running main database migrations with image: $BACKEND_IMAGE"
          sed "s|PLACEHOLDER_BACKEND_IMAGE|$BACKEND_IMAGE|g" k8s/migrations/db-migration-job.yaml > /tmp/db-migration-job.yaml
          kubectl apply -f /tmp/db-migration-job.yaml

          echo "‚è≥ Waiting for main database migration to complete..."
          if kubectl wait --for=condition=complete job/db-migration -n ${{ env.NAMESPACE }} --timeout=300s; then
            MIGRATION_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l job-name=db-migration -o jsonpath='{.items[0].metadata.name}')
            echo "‚úÖ Main database migration successful"
            echo "=== Migration Logs ==="
            kubectl logs $MIGRATION_POD -n ${{ env.NAMESPACE }}
            kubectl delete job db-migration -n ${{ env.NAMESPACE }}
          else
            echo "‚ùå Main database migration failed"
            echo "=== Checking Job Status ==="
            kubectl describe job db-migration -n ${{ env.NAMESPACE }}
            echo "=== Checking Pod Logs ==="
            kubectl logs job/db-migration -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: üóÉ Create Community Database
        run: |
          echo "üóÉ Creating Community database..."
          
          # ÂàõÂª∫ Kubernetes Job Êù•ÊâßË°åÊï∞ÊçÆÂ∫ìÂàõÂª∫
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: community-db-setup
            namespace: ${{ env.NAMESPACE }}
          spec:
            template:
              spec:
                containers:
                - name: postgres-client
                  image: postgres:15-alpine
                  env:
                  - name: PGHOST
                    value: "$(echo "${{ needs.terraform-infrastructure.outputs.rds_endpoint }}" | cut -d':' -f1)"
                  - name: PGPORT
                    value: "${{ needs.terraform-infrastructure.outputs.rds_port }}"
                  - name: PGUSER
                    value: "${{ needs.terraform-infrastructure.outputs.rds_username }}"
                  - name: PGPASSWORD
                    value: "${{ secrets.DB_PASSWORD }}"
                  - name: COMMUNITY_DB_NAME
                    value: "communitydb"
                  - name: COMMUNITY_DB_USERNAME
                    value: "community_user"
                  - name: COMMUNITY_DB_PASSWORD
                    value: "${{ secrets.COMMUNITY_DB_PASSWORD }}"
                  command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "üîÑ Starting Community database setup..."
                    
                    echo "Environment variables:"
                    echo "PGHOST: \$PGHOST"
                    echo "PGPORT: \$PGPORT" 
                    echo "PGUSER: \$PGUSER"
                    echo "COMMUNITY_DB_NAME: \$COMMUNITY_DB_NAME"
                    echo "COMMUNITY_DB_USERNAME: \$COMMUNITY_DB_USERNAME"
                    
                    # Wait for RDS to be available
                    echo "‚è≥ Waiting for RDS to be available..."
                    for i in \$(seq 1 30); do
                      if psql -d postgres -c "\q" 2>/dev/null; then
                        echo "‚úÖ RDS connection successful"
                        break
                      else
                        echo "‚è≥ Attempt \$i: RDS connection failed, waiting 10 seconds..."
                        sleep 10
                      fi
                    done
                    
                    # Check if database exists, create if not
                    echo "Checking if database exists: \$COMMUNITY_DB_NAME"
                    if psql -d postgres -c "\l" | grep -q "\$COMMUNITY_DB_NAME"; then
                      echo "‚úÖ Database \$COMMUNITY_DB_NAME already exists, skipping creation"
                    else
                      echo "Creating database: \$COMMUNITY_DB_NAME"
                      psql -d postgres -c "CREATE DATABASE \$COMMUNITY_DB_NAME;"
                      echo "‚úÖ Database created successfully"
                    fi
                    
                    # Check if user exists, create if not
                    echo "Checking if user exists: \$COMMUNITY_DB_USERNAME"
                    if psql -d postgres -c "SELECT 1 FROM pg_roles WHERE rolname='\$COMMUNITY_DB_USERNAME'" | grep -q "1"; then
                      echo "‚úÖ User \$COMMUNITY_DB_USERNAME already exists, skipping creation"
                    else
                      echo "Creating user: \$COMMUNITY_DB_USERNAME"
                      psql -d postgres -c "CREATE USER \$COMMUNITY_DB_USERNAME WITH PASSWORD '\$COMMUNITY_DB_PASSWORD';"
                      echo "‚úÖ User created successfully"
                    fi
                    
                    # Grant privileges
                    echo "Granting privileges..."
                    psql -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE \$COMMUNITY_DB_NAME TO \$COMMUNITY_DB_USERNAME;"
                    
                    echo "‚úÖ Community database setup completed"
                restartPolicy: Never
            backoffLimit: 2
          EOF
          
          echo "‚è≥ Waiting for Community database creation job to complete..."
          if kubectl wait --for=condition=complete job/community-db-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "‚úÖ Community database creation successful"
            kubectl delete job community-db-setup -n ${{ env.NAMESPACE }}
          else
            echo "‚ùå Community database creation failed"
            kubectl logs job/community-db-setup -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: üóÉ Create Community Database Tables
        run: |
          echo "üóÉ Creating Community database tables..."
          
          # ÂàõÂª∫ Kubernetes Job Êù•ÊâßË°åË°®ÁªìÊûÑÂàõÂª∫
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: community-schema-setup
            namespace: ${{ env.NAMESPACE }}
          spec:
            template:
              spec:
                containers:
                - name: postgres-migration
                  image: postgres:15-alpine
                  env:
                  - name: PGHOST
                    value: "$(echo "${{ needs.terraform-infrastructure.outputs.rds_endpoint }}" | cut -d':' -f1)"
                  - name: PGPORT
                    value: "${{ needs.terraform-infrastructure.outputs.rds_port }}"
                  - name: PGUSER
                    value: "community_user"
                  - name: PGPASSWORD
                    value: "${{ secrets.COMMUNITY_DB_PASSWORD }}"
                  - name: PGDATABASE
                    value: "communitydb"
                  command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "üîÑ Starting Community database table structure creation..."
                    
                    # Wait for database to be available
                    echo "‚è≥ Waiting for database to be available..."
                    for i in \$(seq 1 30); do
                      if psql -c "\q" 2>/dev/null; then
                        echo "‚úÖ Database connection successful"
                        break
                      else
                        echo "‚è≥ Attempt \$i: Database connection failed, waiting 10 seconds..."
                        sleep 10
                      fi
                    done
                    
                    # Execute SQL to create table structure
                    echo "Creating table structure..."
                    psql -c "
                    -- Enable extensions
                    CREATE EXTENSION IF NOT EXISTS pg_trgm;

                    -- ÂàõÂª∫Áî®Êà∑Ë°®
                    CREATE TABLE IF NOT EXISTS users (
                        id SERIAL PRIMARY KEY,
                        username VARCHAR(50) UNIQUE NOT NULL,
                        email VARCHAR(255) UNIQUE NOT NULL,
                        password_hash VARCHAR(255) NOT NULL,
                        role VARCHAR(20) DEFAULT 'user',
                        avatar TEXT,
                        reputation INTEGER DEFAULT 0,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );

                    -- ÂàõÂª∫Â∏ñÂ≠êË°®
                    CREATE TABLE IF NOT EXISTS posts (
                        id SERIAL PRIMARY KEY,
                        title VARCHAR(255) NOT NULL,
                        content TEXT NOT NULL,
                        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                        post_type VARCHAR(50) DEFAULT 'discussion',
                        category VARCHAR(100) DEFAULT 'general',
                        status VARCHAR(20) DEFAULT 'published',
                        view_count INTEGER DEFAULT 0,
                        like_count INTEGER DEFAULT 0,
                        comment_count INTEGER DEFAULT 0,
                        tags VARCHAR(500),
                        is_pinned BOOLEAN DEFAULT FALSE,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );

                    -- ÂàõÂª∫ËØÑËÆ∫Ë°®
                    CREATE TABLE IF NOT EXISTS comments (
                        id SERIAL PRIMARY KEY,
                        post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
                        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                        parent_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
                        content TEXT NOT NULL,
                        like_count INTEGER DEFAULT 0,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );

                    -- ÂàõÂª∫ÁÇπËµûË°®
                    CREATE TABLE IF NOT EXISTS likes (
                        id SERIAL PRIMARY KEY,
                        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                        post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
                        comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        CONSTRAINT unique_user_post_like UNIQUE (user_id, post_id),
                        CONSTRAINT unique_user_comment_like UNIQUE (user_id, comment_id),
                        CONSTRAINT check_like_target CHECK (
                            (post_id IS NOT NULL AND comment_id IS NULL) OR 
                            (post_id IS NULL AND comment_id IS NOT NULL)
                        )
                    );

                    -- ÂàõÂª∫Á¥¢Âºï
                    CREATE INDEX IF NOT EXISTS idx_posts_user_id ON posts(user_id);
                    CREATE INDEX IF NOT EXISTS idx_posts_created_at ON posts(created_at DESC);
                    CREATE INDEX IF NOT EXISTS idx_posts_type_status ON posts(post_type, status);
                    CREATE INDEX IF NOT EXISTS idx_posts_category ON posts(category);
                    CREATE INDEX IF NOT EXISTS idx_posts_like_count ON posts(like_count DESC);
                    CREATE INDEX IF NOT EXISTS idx_posts_pinned ON posts(is_pinned, created_at DESC);

                    CREATE INDEX IF NOT EXISTS idx_comments_post_id ON comments(post_id);
                    CREATE INDEX IF NOT EXISTS idx_comments_user_id ON comments(user_id);
                    CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id);
                    CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at DESC);

                    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
                    CREATE INDEX IF NOT EXISTS idx_users_reputation ON users(reputation DESC);

                    -- ÂàõÂª∫Ëß¶ÂèëÂô®ÂáΩÊï∞
                    CREATE OR REPLACE FUNCTION update_updated_at_column()
                    RETURNS TRIGGER AS \\$\\$
                    BEGIN
                        NEW.updated_at = CURRENT_TIMESTAMP;
                        RETURN NEW;
                    END;
                    \\$\\$ language 'plpgsql';

                    -- ÂàõÂª∫Ëß¶ÂèëÂô®
                    DROP TRIGGER IF EXISTS update_users_updated_at ON users;
                    CREATE TRIGGER update_users_updated_at
                        BEFORE UPDATE ON users
                        FOR EACH ROW
                        EXECUTE FUNCTION update_updated_at_column();

                    DROP TRIGGER IF EXISTS update_posts_updated_at ON posts;
                    CREATE TRIGGER update_posts_updated_at
                        BEFORE UPDATE ON posts
                        FOR EACH ROW
                        EXECUTE FUNCTION update_updated_at_column();

                    DROP TRIGGER IF EXISTS update_comments_updated_at ON comments;
                    CREATE TRIGGER update_comments_updated_at
                        BEFORE UPDATE ON comments
                        FOR EACH ROW
                        EXECUTE FUNCTION update_updated_at_column();

                    -- È™åËØÅË°®ÂàõÂª∫
                    SELECT '‚úÖ Table structure creation completed' as status;
                    "

                    echo "‚úÖ Community database table structure creation completed"
                restartPolicy: Never
            backoffLimit: 2
          EOF
          
          echo "‚è≥ Waiting for Community database table structure creation job to complete..."
          if kubectl wait --for=condition=complete job/community-schema-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "‚úÖ Community database table structure creation successful"
            kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }}
          else
            echo "‚ùå Community database table structure creation failed"
            kubectl logs job/community-schema-setup -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: ‚úÖ Verify Database Configuration
        run: |
          echo "‚úÖ Database configuration completed"
          echo "üìä Database Status:"
          echo "   ‚úÖ Main database migration: Completed"
          echo "   ‚úÖ Community database: Created"
          echo "   ‚úÖ Community table structure: Created"

  deploy-frontend:
    name: "Deploy Frontend Service to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
      - configure-rds-database
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          echo "üîß Updating kubeconfig for EKS cluster"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          echo "üîß Installing kubectl..."
          sudo snap install kubectl --classic

      - name: üîß Install envsubst
        run: |
          echo "üîß Installing envsubst..."
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: üîß Update Service Account Role ARNs
        run: |
          ALB_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.alb_controller_role_arn }}"
          FRONTEND_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.frontend_role_arn }}"
          
          echo "üîß Updating service account role ARNs..."
          echo "ALB Role ARN: $ALB_ROLE_ARN"
          echo "Frontend Role ARN: $FRONTEND_ROLE_ARN"
          
          sed -i "s|ALB_ROLE_ARN_PLACEHOLDER|$ALB_ROLE_ARN|g" k8s/service-accounts/alb-service-account.yaml
          sed -i "s|FRONTEND_ROLE_ARN_PLACEHOLDER|$FRONTEND_ROLE_ARN|g" k8s/service-accounts/frontend-service-account.yaml

      - name: üîß Apply ALB Controller ServiceAccount
        run: |
          echo "üîß Applying ALB controller service account..."
          kubectl delete serviceaccount aws-load-balancer-controller -n kube-system --ignore-not-found=true
          kubectl apply -f k8s/service-accounts/alb-service-account.yaml

      - name: üîÑ Restart ALB Controller
        run: |
          echo "üîÑ Restarting ALB controller..."
          kubectl rollout restart deployment/aws-load-balancer-controller -n kube-system
          kubectl rollout status deployment/aws-load-balancer-controller -n kube-system --timeout=300s

      - name: üîß Update Frontend Secrets
        run: |
          export S3_BUCKET_NAME="${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}"
          export AWS_REGION="${{ env.AWS_REGION }}"
          
          echo "üîß Updating frontend secrets..."
          envsubst < k8s/configs/s3-secret.yaml > k8s/configs/s3-secret.yaml.tmp
          mv k8s/configs/s3-secret.yaml.tmp k8s/configs/s3-secret.yaml

      - name: üöÄ Deploy Frontend Resources
        run: |
          cd k8s
          echo "üöÄ Deploying frontend resources..."
          kubectl apply -f namespaces/comic-website.yaml
          kubectl apply -f service-accounts/alb-service-account.yaml
          kubectl apply -f service-accounts/frontend-service-account.yaml
          kubectl apply -f configs/frontend-config.yaml
          kubectl apply -f configs/s3-secret.yaml
          kubectl apply -f service/frontend-service.yaml
          kubectl apply -f networking/alb-ingress-class.yaml
          kubectl apply -f networking/alb-ingress.yaml

      - name: üöÄ Deploy Frontend Application
        run: |
          cd k8s
          echo "üöÄ Deploying frontend application..."
          if kubectl get deployment frontend-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            echo "üîÑ Replacing existing frontend deployment"
            kubectl replace -f deployments/frontend-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            echo "üì¶ Creating new frontend deployment"
            kubectl apply -f deployments/frontend-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: üîÑ Update Frontend Image
        run: |
          FRONTEND_IMAGE="${{ needs.build-images.outputs.frontend_image }}"
          echo "üîÑ Updating frontend image to: $FRONTEND_IMAGE"
          
          kubectl patch deployment frontend-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"frontend","image":"'"$FRONTEND_IMAGE"'"}]}}}}'

      - name: ‚è≥ Wait for Frontend Deployment
        run: |
          echo "‚è≥ Waiting for frontend deployment to complete..."
          kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=180s

      - name: ‚úÖ Verify Frontend Service
        run: |
          echo "‚úÖ Frontend service deployed successfully"
          echo "üìä Frontend Deployment Status:"
          kubectl get deployment frontend-deployment -n ${{ env.NAMESPACE }}
          echo "üìä Frontend Service Status:"
          kubectl get service frontend-service -n ${{ env.NAMESPACE }}

  deploy-backend:
    name: "Deploy Backend Service to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
      - configure-rds-database
      - deploy-frontend
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          echo "üîß Updating kubeconfig for EKS cluster"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          echo "üîß Installing kubectl..."
          sudo snap install kubectl --classic

      - name: üîß Update Backend Service Account Role ARN
        run: |
          BACKEND_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.backend_role_arn }}"
          echo "üîß Updating backend service account role ARN: $BACKEND_ROLE_ARN"
          sed -i "s|BACKEND_ROLE_ARN_PLACEHOLDER|$BACKEND_ROLE_ARN|g" k8s/service-accounts/backend-service-account.yaml

      - name: üöÄ Deploy Backend Resources
        run: |
          cd k8s
          echo "üöÄ Deploying backend resources..."
          kubectl apply -f service-accounts/backend-service-account.yaml
          kubectl apply -f configs/backend-config.yaml
          kubectl apply -f service/backend-service.yaml

      - name: üöÄ Deploy Backend Application
        run: |
          cd k8s
          echo "üöÄ Deploying backend application..."
          if kubectl get deployment backend-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            echo "üîÑ Replacing existing backend deployment"
            kubectl replace -f deployments/backend-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            echo "üì¶ Creating new backend deployment"
            kubectl apply -f deployments/backend-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: üîÑ Update Backend Image
        run: |
          BACKEND_IMAGE="${{ needs.build-images.outputs.backend_image }}"
          echo "üîÑ Updating backend image to: $BACKEND_IMAGE"
          
          kubectl patch deployment backend-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"backend","image":"'"$BACKEND_IMAGE"'"}]}}}}'

      - name: ‚è≥ Wait for Backend Deployment
        run: |
          echo "‚è≥ Waiting for backend deployment to complete..."
          kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} --timeout=300s

      - name: ‚úÖ Verify Backend Service
        run: |
          echo "‚úÖ Backend service deployed successfully"
          echo "üìä Backend Deployment Status:"
          kubectl get deployment backend-deployment -n ${{ env.NAMESPACE }}
          echo "üìä Backend Service Status:"
          kubectl get service backend-service -n ${{ env.NAMESPACE }}

  deploy-community:
    name: "Deploy Community Service to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
      - configure-rds-database
      - deploy-backend
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: |
          echo "üîß Updating kubeconfig for EKS cluster"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: üß∞ Setup kubectl
        run: |
          echo "üîß Installing kubectl..."
          sudo snap install kubectl --classic

      - name: üîß Install envsubst
        run: |
          echo "üîß Installing envsubst..."
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: üîß Update Community Service Account Role ARN
        run: |
          COMMUNITY_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.community_role_arn }}"
          echo "üîß Updating community service account role ARN: $COMMUNITY_ROLE_ARN"
          sed -i "s|COMMUNITY_ROLE_ARN_PLACEHOLDER|$COMMUNITY_ROLE_ARN|g" k8s/service-accounts/community-service-account.yaml

      - name: üîß Update Community Secrets
        run: |
          export RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          export RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          export RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          export RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          export RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
          export RDS_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          # Êñ∞Â¢û Community Êï∞ÊçÆÂ∫ìÁéØÂ¢ÉÂèòÈáè
          export COMMUNITY_DB_NAME="communitydb"
          export COMMUNITY_DB_USERNAME="community_user"
          export COMMUNITY_DB_PASSWORD="${{ secrets.COMMUNITY_DB_PASSWORD }}"
          export COMMUNITY_JWT_SECRET="${{ secrets.COMMUNITY_JWT_SECRET }}"
          
          # ‰ªé Terraform ËæìÂá∫Ëé∑Âèñ Redis ÈÖçÁΩÆ
          export REDIS_HOST="${{ needs.terraform-infrastructure.outputs.redis_host }}"
          export REDIS_PORT="${{ needs.terraform-infrastructure.outputs.redis_port }}"
          export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          
          echo "üîß Updating community secrets..."
          envsubst < k8s/configs/community-secret.yaml > k8s/configs/community-secret.yaml.tmp
          mv k8s/configs/community-secret.yaml.tmp k8s/configs/community-secret.yaml

      - name: üöÄ Deploy Community Resources
        run: |
          cd k8s
          echo "üöÄ Deploying community resources..."
          kubectl apply -f service-accounts/community-service-account.yaml
          kubectl apply -f configs/community-configmap.yaml
          kubectl apply -f configs/community-secret.yaml
          kubectl apply -f service/community-service.yaml

      - name: üöÄ Deploy Community Application
        run: |
          cd k8s
          echo "üöÄ Deploying community application..."
          if kubectl get deployment community-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            echo "üîÑ Replacing existing community deployment"
            kubectl replace -f deployments/community-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            echo "üì¶ Creating new community deployment"
            kubectl apply -f deployments/community-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: üîÑ Update Community Image
        run: |
          COMMUNITY_IMAGE="${{ needs.build-images.outputs.community_image }}"
          echo "üîÑ Updating community image to: $COMMUNITY_IMAGE"
          
          kubectl patch deployment community-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"community-service","image":"'"$COMMUNITY_IMAGE"'"}]}}}}'

      - name: ‚è≥ Wait for Community Deployment
        run: |
          echo "‚è≥ Waiting for community deployment to complete..."
          kubectl rollout status deployment/community-deployment -n ${{ env.NAMESPACE }} --timeout=180s

      - name: ‚úÖ Verify Community Service
        run: |
          echo "‚úÖ Community service deployed successfully"
          echo "üìä Community Deployment Status:"
          kubectl get deployment community-deployment -n ${{ env.NAMESPACE }}
          echo "üìä Community Service Status:"
          kubectl get service community-service -n ${{ env.NAMESPACE }}

      - name: üåê Get ALB URL
        id: get-alb-url
        run: |
          echo "üåê Getting ALB URL..."
          for i in {1..15}; do
            ALB_HOSTNAME=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALB_HOSTNAME" ]; then
              echo "‚úÖ ALB URL found: http://$ALB_HOSTNAME"
              echo "alb_url=http://$ALB_HOSTNAME" >> $GITHUB_OUTPUT
              break
            else
              echo "‚è≥ Attempt $i: ALB not ready yet, waiting 20 seconds..."
              sleep 20
            fi
          done

      - name: üì¢ Display Application URL
        run: |
          echo "================================================"
          echo "üöÄ All Services Deployed Successfully!"
          echo "================================================"
          echo ""
          echo "üåê Access URL:"
          echo "   ${{ steps.get-alb-url.outputs.alb_url }}"
          echo ""
          echo "üìä Services Status:"
          echo "   ‚úÖ Frontend Service: Ready"
          echo "   ‚úÖ Backend API Service: Ready" 
          echo "   ‚úÖ Community Service: Ready"
          echo "   ‚úÖ Database Configuration: Complete"
          echo "================================================"