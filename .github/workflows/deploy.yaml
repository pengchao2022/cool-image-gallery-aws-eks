name: Deploy Comic Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  terraform-infrastructure:
    name: "Terraform - Create Infrastructure"
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend_ecr_url: ${{ steps.terraform-outputs.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.terraform-outputs.outputs.frontend_ecr_url }}
      community_ecr_url: ${{ steps.terraform-outputs.outputs.community_ecr_url }}
      rds_endpoint: ${{ steps.terraform-outputs.outputs.rds_endpoint }}
      rds_port: ${{ steps.terraform-outputs.outputs.rds_port }}
      rds_username: ${{ steps.terraform-outputs.outputs.rds_username }}
      rds_database: ${{ steps.terraform-outputs.outputs.rds_database }}
      s3_bucket_name: ${{ steps.terraform-outputs.outputs.s3_bucket_name }}
      s3_bucket_region: ${{ steps.terraform-outputs.outputs.s3_bucket_region }}
      alb_controller_role_arn: ${{ steps.terraform-outputs.outputs.alb_controller_role_arn }}
      backend_role_arn: ${{ steps.terraform-outputs.outputs.backend_role_arn }}
      frontend_role_arn: ${{ steps.terraform-outputs.outputs.frontend_role_arn }}
      community_role_arn: ${{ steps.terraform-outputs.outputs.community_role_arn }}
      alb_url: ${{ steps.terraform-outputs.outputs.alb_url }}
      # Redis 配置输出
      redis_host: ${{ steps.terraform-outputs.outputs.redis_host }}
      redis_port: ${{ steps.terraform-outputs.outputs.redis_port }}
      # 新增 Community 数据库输出
      community_database_name: ${{ steps.terraform-outputs.outputs.community_database_name }}
      community_database_username: ${{ steps.terraform-outputs.outputs.community_database_username }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: ⚙️ Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=terraform/state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comic-website-tfstate-lock"

      - name: ✅ Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: 🚀 Terraform Plan and Apply
        run: |
          cd terraform
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="community_db_password=${{ secrets.COMMUNITY_DB_PASSWORD }}" \
            -var="community_db_username=${{ secrets.COMMUNITY_DB_USERNAME }}" \
            -var="community_db_name=${{ secrets.COMMUNITY_DB_NAME }}"
          terraform apply -auto-approve tfplan

      - name: 📋 Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          terraform output -json > outputs.json
          
          BACKEND_ECR_URL=$(jq -r '.backend_repository_url.value // empty' outputs.json)
          FRONTEND_ECR_URL=$(jq -r '.frontend_repository_url.value // empty' outputs.json)
          COMMUNITY_ECR_URL=$(jq -r '.community_repository_url.value // empty' outputs.json)
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value // empty' outputs.json)
          RDS_PORT=$(jq -r '.rds_port.value // "5432"' outputs.json)
          RDS_USERNAME=$(jq -r '.rds_username.value // "comicadmin"' outputs.json)
          RDS_DATABASE=$(jq -r '.rds_database_name.value // "comicdb"' outputs.json)
          S3_BUCKET_NAME=$(jq -r '.s3_bucket_name.value // empty' outputs.json)
          S3_BUCKET_REGION=$(jq -r '.s3_bucket_region.value // empty' outputs.json)
          ALB_CONTROLLER_ROLE_ARN=$(jq -r '.alb_controller_role_arn.value // empty' outputs.json)
          BACKEND_ROLE_ARN=$(jq -r '.backend_role_arn.value // empty' outputs.json)
          FRONTEND_ROLE_ARN=$(jq -r '.frontend_role_arn.value // empty' outputs.json)
          COMMUNITY_ROLE_ARN=$(jq -r '.community_role_arn.value // empty' outputs.json)
          ALB_URL=$(jq -r '.alb_url.value // empty' outputs.json)
          
          # Redis 输出
          REDIS_HOST=$(jq -r '.redis_host.value // "redis-master.comic-website.svc.cluster.local"' outputs.json)
          REDIS_PORT=$(jq -r '.redis_port.value // "6379"' outputs.json)
          
          # 使用硬编码的 Community 数据库信息
          COMMUNITY_DB_NAME="communitydb"
          COMMUNITY_DB_USERNAME="community_user"
          
          # 如果 community_ecr_url 为空，创建临时的 ECR URL
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "⚠️ WARNING: COMMUNITY_ECR_URL is empty, creating temporary ECR URL"
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            COMMUNITY_ECR_URL="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/comic-website-prod-community"
          fi
          
          echo "backend_ecr_url=$BACKEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "frontend_ecr_url=$FRONTEND_ECR_URL" >> $GITHUB_OUTPUT
          echo "community_ecr_url=$COMMUNITY_ECR_URL" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "rds_port=$RDS_PORT" >> $GITHUB_OUTPUT
          echo "rds_username=$RDS_USERNAME" >> $GITHUB_OUTPUT
          echo "rds_database=$RDS_DATABASE" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket_region=$S3_BUCKET_REGION" >> $GITHUB_OUTPUT
          echo "alb_controller_role_arn=$ALB_CONTROLLER_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "backend_role_arn=$BACKEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "frontend_role_arn=$FRONTEND_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "community_role_arn=$COMMUNITY_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT
          echo "redis_port=$REDIS_PORT" >> $GITHUB_OUTPUT
          
          # 使用硬编码值
          echo "community_database_name=$COMMUNITY_DB_NAME" >> $GITHUB_OUTPUT
          echo "community_database_username=$COMMUNITY_DB_USERNAME" >> $GITHUB_OUTPUT

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

  build-images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    environment: production
    if: needs.terraform-infrastructure.result == 'success'
    
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image_tag }}
      frontend_image: ${{ steps.build-frontend.outputs.image_tag }}
      community_image: ${{ steps.build-community.outputs.image_tag }}

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Get AWS Account ID and ECR Registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: 🔐 Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: 🔍 Set ECR URLs
        run: |
          BACKEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.backend_ecr_url }}"
          FRONTEND_ECR_URL="${{ needs.terraform-infrastructure.outputs.frontend_ecr_url }}"
          COMMUNITY_ECR_URL="${{ needs.terraform-infrastructure.outputs.community_ecr_url }}"
          
          # 确保所有 ECR URL 都存在
          if [ -z "$BACKEND_ECR_URL" ]; then
            echo "❌ ERROR: BACKEND_ECR_URL is required but empty"
            exit 1
          fi
          
          if [ -z "$FRONTEND_ECR_URL" ]; then
            echo "❌ ERROR: FRONTEND_ECR_URL is required but empty"
            exit 1
          fi
          
          if [ -z "$COMMUNITY_ECR_URL" ]; then
            echo "❌ ERROR: COMMUNITY_ECR_URL is required but empty"
            exit 1
          fi
          
          echo "BACKEND_ECR_URL=$BACKEND_ECR_URL" >> $GITHUB_ENV
          echo "FRONTEND_ECR_URL=$FRONTEND_ECR_URL" >> $GITHUB_ENV
          echo "COMMUNITY_ECR_URL=$COMMUNITY_ECR_URL" >> $GITHUB_ENV

      - name: 🏗 Check if Backend Image Exists
        id: check-backend
        run: |
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          if docker manifest inspect $BACKEND_IMAGE > /dev/null 2>&1; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          fi

      - name: 🧱 Build Backend Image (if needed)
        id: build-backend
        if: steps.check-backend.outputs.image_exists == 'false'
        run: |
          cd backend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          BACKEND_IMAGE="$BACKEND_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing backend image: $BACKEND_IMAGE"
          
          # 详细的调试信息
          echo "=== Backend 构建调试 ==="
          echo "当前目录: $(pwd)"
          echo "目录内容:"
          ls -la
          echo ""
          echo "scripts 文件夹内容:"
          ls -la scripts/ || echo "scripts 文件夹不存在"
          echo ""
          echo "scripts 文件列表:"
          find scripts/ -type f 2>/dev/null || echo "没有找到 scripts 文件"
          echo ""
          echo "Dockerfile 内容:"
          cat Dockerfile
          
          # 使用 --no-cache 确保重新构建
          docker build --no-cache -t $BACKEND_IMAGE .
          
          # 详细的镜像验证
          echo "=== Backend 镜像验证 ==="
          echo "1. 检查镜像中的文件结构:"
          docker run --rm $BACKEND_IMAGE ls -la /app/
          echo ""
          echo "2. 检查 scripts 文件夹:"
          docker run --rm $BACKEND_IMAGE ls -la /app/scripts/ || echo "scripts 文件夹不存在"
          echo ""
          echo "3. 查找 migrate.js 文件:"
          docker run --rm $BACKEND_IMAGE find /app -name "migrate.js" -type f 2>/dev/null || echo "migrate.js 文件不存在"
          echo ""
          echo "4. 检查所有文件:"
          docker run --rm $BACKEND_IMAGE find /app -type f | head -20
          
          docker push $BACKEND_IMAGE
          echo "image_tag=$BACKEND_IMAGE" >> $GITHUB_OUTPUT

      - name: 🎨 Build Frontend Image
        id: build-frontend
        run: |
          cd frontend
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          FRONTEND_IMAGE="$FRONTEND_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing frontend image: $FRONTEND_IMAGE"
          docker build -t $FRONTEND_IMAGE .
          docker push $FRONTEND_IMAGE
          echo "image_tag=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT

      - name: 💬 Build Community Service Image
        id: build-community
        run: |
          cd community-service
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          COMMUNITY_IMAGE="$COMMUNITY_ECR_URL:$IMAGE_TAG"
          echo "Building and pushing community service image: $COMMUNITY_IMAGE"
          
          # 调试信息
          echo "=== Community Service 构建调试 ==="
          echo "当前目录: $(pwd)"
          echo "目录内容:"
          ls -la
          echo ""
          echo "src 文件夹内容:"
          ls -la src/ | head -10
          
          docker build -t $COMMUNITY_IMAGE .
          docker push $COMMUNITY_IMAGE
          echo "image_tag=$COMMUNITY_IMAGE" >> $GITHUB_OUTPUT

  configure-rds-database:
    name: "Configure RDS Database"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🧰 Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: 🗃 Create Namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 🧹 Clean Up Existing Database Jobs
        run: |
          kubectl delete job db-migration -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job database-migration -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-db-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }} --ignore-not-found=true
          sleep 5

      - name: 🔧 Update Kubernetes Secrets for Database
        run: |
          export RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          export RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          export RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          export RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
          export RDS_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          # 新增 Community 数据库环境变量
          export COMMUNITY_DB_NAME="communitydb"
          export COMMUNITY_DB_USERNAME="community_user"
          export COMMUNITY_DB_PASSWORD="${{ secrets.COMMUNITY_DB_PASSWORD }}"
          export COMMUNITY_JWT_SECRET="${{ secrets.COMMUNITY_JWT_SECRET }}"
          
          envsubst < k8s/configs/rds-secret.yaml > k8s/configs/rds-secret.yaml.tmp
          mv k8s/configs/rds-secret.yaml.tmp k8s/configs/rds-secret.yaml
          
          envsubst < k8s/configs/backend-secret.yaml > k8s/configs/backend-secret.yaml.tmp
          mv k8s/configs/backend-secret.yaml.tmp k8s/configs/backend-secret.yaml

      - name: 🚀 Apply Database Secrets
        run: |
          cd k8s
          kubectl apply -f configs/rds-secret.yaml
          kubectl apply -f configs/backend-secret.yaml

      - name: 🗃 Run Main Database Migrations
        run: |
          echo "🚀 Running main database migration..."
          
          # 创建正确的数据库迁移 Job
          cat > k8s/migrations/database-migration-fixed.yaml << EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: database-migration
            namespace: ${{ env.NAMESPACE }}
          spec:
            template:
              spec:
                serviceAccountName: comic-backend-sa
                containers:
                - name: migration
                  image: ${{ needs.build-images.outputs.backend_image }}
                  command: ["node"]
                  args: ["scripts/migrate.js"]
                  env:
                  - name: RDS_HOST
                    valueFrom:
                      secretKeyRef:
                        name: rds-secret
                        key: host
                  - name: RDS_PORT
                    value: "5432"
                  - name: RDS_DATABASE
                    value: "comicdb"
                  - name: RDS_USERNAME
                    value: "comicadmin"
                  - name: RDS_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: rds-secret
                        key: password
                  - name: NODE_ENV
                    value: "production"
                  resources:
                    limits:
                      cpu: 500m
                      memory: 512Mi
                    requests:
                      cpu: 200m
                      memory: 256Mi
                restartPolicy: Never
            backoffLimit: 2
            activeDeadlineSeconds: 300
          EOF
          
          kubectl apply -f k8s/migrations/database-migration-fixed.yaml
          
          echo "Waiting for database migration to complete..."
          if kubectl wait --for=condition=complete job/database-migration -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "✅ Database migration successful"
            kubectl delete job database-migration -n ${{ env.NAMESPACE }}
          else
            echo "❌ Database migration failed"
            kubectl logs job/database-migration -n ${{ env.NAMESPACE }} --tail=50
            exit 1
          fi

      - name: 🗃 Create Community Database
        run: |
          # 使用现有的 community-schema-job.yaml 文件
          kubectl apply -f k8s/migrations/community-schema-job.yaml

          echo "Waiting for Community database creation to complete..."
          if kubectl wait --for=condition=complete job/community-db-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "Community database creation successful"
            kubectl delete job community-db-setup -n ${{ env.NAMESPACE }}
          else
            echo "Community database creation failed"
            kubectl logs job/community-db-setup -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: 🗃 Create Community Database Tables
        run: |
          kubectl apply -f k8s/migrations/community-schema-job.yaml

          echo "Waiting for Community database table structure creation to complete..."
          if kubectl wait --for=condition=complete job/community-schema-setup -n ${{ env.NAMESPACE }} --timeout=300s; then
            echo "Community database table structure creation successful"
            kubectl delete job community-schema-setup -n ${{ env.NAMESPACE }}
          else
            echo "Community database table structure creation failed"
            kubectl logs job/community-schema-setup -n ${{ env.NAMESPACE }}
            exit 1
          fi

      - name: ✅ Verify Database Configuration
        run: |
          echo "✅ Database configuration completed successfully"

  deploy-frontend:
    name: "Deploy Frontend Service to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
      - configure-rds-database
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🧰 Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: 🔧 Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: 🔧 Update Service Account Role ARNs
        run: |
          ALB_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.alb_controller_role_arn }}"
          FRONTEND_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.frontend_role_arn }}"
          
          sed -i "s|ALB_ROLE_ARN_PLACEHOLDER|$ALB_ROLE_ARN|g" k8s/service-accounts/alb-service-account.yaml
          sed -i "s|FRONTEND_ROLE_ARN_PLACEHOLDER|$FRONTEND_ROLE_ARN|g" k8s/service-accounts/frontend-service-account.yaml

      - name: 🔧 Apply ALB Controller ServiceAccount
        run: |
          kubectl delete serviceaccount aws-load-balancer-controller -n kube-system --ignore-not-found=true
          kubectl apply -f k8s/service-accounts/alb-service-account.yaml

      - name: 🔄 Restart ALB Controller
        run: |
          kubectl rollout restart deployment/aws-load-balancer-controller -n kube-system
          kubectl rollout status deployment/aws-load-balancer-controller -n kube-system --timeout=300s

      - name: 🔧 Update Frontend Secrets
        run: |
          export S3_BUCKET_NAME="${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}"
          export AWS_REGION="${{ env.AWS_REGION }}"
          
          envsubst < k8s/configs/s3-secret.yaml > k8s/configs/s3-secret.yaml.tmp
          mv k8s/configs/s3-secret.yaml.tmp k8s/configs/s3-secret.yaml

      - name: 🚀 Deploy Frontend Resources
        run: |
          cd k8s
          kubectl apply -f namespaces/comic-website.yaml
          kubectl apply -f service-accounts/alb-service-account.yaml
          kubectl apply -f service-accounts/frontend-service-account.yaml
          kubectl apply -f configs/frontend-config.yaml
          kubectl apply -f configs/s3-secret.yaml
          kubectl apply -f service/frontend-service.yaml
          kubectl apply -f networking/alb-ingress-class.yaml
          kubectl apply -f networking/alb-ingress.yaml

      - name: 🚀 Deploy Frontend Application
        run: |
          cd k8s
          if kubectl get deployment frontend-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            kubectl replace -f deployments/frontend-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            kubectl apply -f deployments/frontend-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: 🔄 Update Frontend Image
        run: |
          FRONTEND_IMAGE="${{ needs.build-images.outputs.frontend_image }}"
          
          kubectl patch deployment frontend-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"frontend","image":"'"$FRONTEND_IMAGE"'"}]}}}}'

      - name: ⏳ Wait for Frontend Deployment
        run: |
          kubectl rollout status deployment/frontend-deployment -n ${{ env.NAMESPACE }} --timeout=180s

      - name: ✅ Verify Frontend Service
        run: |
          echo "Frontend service deployed successfully"

  deploy-backend:
    name: "Deploy Backend Service to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
      - configure-rds-database
      - deploy-frontend
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🧰 Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: 🔧 Update Backend Service Account Role ARN
        run: |
          BACKEND_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.backend_role_arn }}"
          sed -i "s|BACKEND_ROLE_ARN_PLACEHOLDER|$BACKEND_ROLE_ARN|g" k8s/service-accounts/backend-service-account.yaml

      - name: 🚀 Deploy Backend Resources
        run: |
          cd k8s
          kubectl apply -f service-accounts/backend-service-account.yaml
          kubectl apply -f configs/backend-config.yaml
          kubectl apply -f service/backend-service.yaml

      - name: 🚀 Deploy Backend Application
        run: |
          cd k8s
          if kubectl get deployment backend-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            kubectl replace -f deployments/backend-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            kubectl apply -f deployments/backend-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: 🔄 Update Backend Image
        run: |
          BACKEND_IMAGE="${{ needs.build-images.outputs.backend_image }}"
          
          kubectl patch deployment backend-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"backend","image":"'"$BACKEND_IMAGE"'"}]}}}}'

      - name: ⏳ Wait for Backend Deployment
        run: |
          kubectl rollout status deployment/backend-deployment -n ${{ env.NAMESPACE }} --timeout=300s

      - name: ✅ Verify Backend Service
        run: |
          echo "Backend service deployed successfully"

  deploy-community:
    name: "Deploy Community Service to EKS"
    runs-on: ubuntu-latest
    needs: 
      - terraform-infrastructure
      - build-images
      - configure-rds-database
      - deploy-backend
    environment: production
    if: needs.terraform-infrastructure.result == 'success'

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☸️ Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: 🧰 Setup kubectl
        run: |
          sudo snap install kubectl --classic

      - name: 🔧 Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: 🔧 Update Community Service Account Role ARN
        run: |
          COMMUNITY_ROLE_ARN="${{ needs.terraform-infrastructure.outputs.community_role_arn }}"
          sed -i "s|COMMUNITY_ROLE_ARN_PLACEHOLDER|$COMMUNITY_ROLE_ARN|g" k8s/service-accounts/community-service-account.yaml

      - name: 🔧 Update Community Secrets
        run: |
          export RDS_ENDPOINT="${{ needs.terraform-infrastructure.outputs.rds_endpoint }}"
          export RDS_PORT="${{ needs.terraform-infrastructure.outputs.rds_port }}"
          export RDS_USERNAME="${{ needs.terraform-infrastructure.outputs.rds_username }}"
          export RDS_DATABASE="${{ needs.terraform-infrastructure.outputs.rds_database }}"
          export RDS_HOST=$(echo "$RDS_ENDPOINT" | cut -d':' -f1)
          export RDS_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          # 新增 Community 数据库环境变量
          export COMMUNITY_DB_NAME="communitydb"
          export COMMUNITY_DB_USERNAME="community_user"
          export COMMUNITY_DB_PASSWORD="${{ secrets.COMMUNITY_DB_PASSWORD }}"
          export COMMUNITY_JWT_SECRET="${{ secrets.COMMUNITY_JWT_SECRET }}"
          
          # 从 Terraform 输出获取 Redis 配置
          export REDIS_HOST="${{ needs.terraform-infrastructure.outputs.redis_host }}"
          export REDIS_PORT="${{ needs.terraform-infrastructure.outputs.redis_port }}"
          export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          
          envsubst < k8s/configs/community-secret.yaml > k8s/configs/community-secret.yaml.tmp
          mv k8s/configs/community-secret.yaml.tmp k8s/configs/community-secret.yaml

      - name: 🚀 Deploy Community Resources
        run: |
          cd k8s
          kubectl apply -f service-accounts/community-service-account.yaml
          kubectl apply -f configs/community-configmap.yaml
          kubectl apply -f configs/community-secret.yaml
          kubectl apply -f service/community-service.yaml

      - name: 🚀 Deploy Community Application
        run: |
          cd k8s
          if kubectl get deployment community-deployment -n ${{ env.NAMESPACE }} &> /dev/null; then
            kubectl replace -f deployments/community-deployment.yaml -n ${{ env.NAMESPACE }} --force
          else
            kubectl apply -f deployments/community-deployment.yaml -n ${{ env.NAMESPACE }}
          fi

      - name: 🔄 Update Community Image
        run: |
          COMMUNITY_IMAGE="${{ needs.build-images.outputs.community_image }}"
          
          kubectl patch deployment community-deployment -n ${{ env.NAMESPACE }} \
            -p='{"spec":{"template":{"spec":{"containers":[{"name":"community-service","image":"'"$COMMUNITY_IMAGE"'"}]}}}}'

      - name: ⏳ Wait for Community Deployment
        run: |
          kubectl rollout status deployment/community-deployment -n ${{ env.NAMESPACE }} --timeout=180s

      - name: ✅ Verify Community Service
        run: |
          echo "Community service deployed successfully"

      - name: 🌐 Get ALB URL
        id: get-alb-url
        run: |
          for i in {1..15}; do
            ALB_HOSTNAME=$(kubectl get ingress comic-website-ingress -n ${{ env.NAMESPACE }} -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -n "$ALB_HOSTNAME" ]; then
              echo "alb_url=http://$ALB_HOSTNAME" >> $GITHUB_OUTPUT
              break
            else
              sleep 20
            fi
          done

      - name: 📢 Display Application URL
        run: |
          echo "================================================"
          echo "🚀 All Services Deployed Successfully!"
          echo "================================================"
          echo ""
          echo "🌐 Access URL:"
          echo "   ${{ steps.get-alb-url.outputs.alb_url }}"
          echo ""
          echo "📊 Services Status:"
          echo "   ✅ Frontend Service: Ready"
          echo "   ✅ Backend API Service: Ready" 
          echo "   ✅ Community Service: Ready"
          echo "   ✅ Database Configuration: Complete"
          echo "   ✅ Database Migrations: Complete"
          echo ""
          echo "🎉 Application is fully operational!"
          echo "================================================"