name: Destroy Comic Website Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Type 'DESTROY' to confirm infrastructure destruction"
        required: true
        default: ""

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: comic-website-prod
  PROJECT_NAME: comic-website
  ENVIRONMENT: prod
  NAMESPACE: comic-website
  TF_BACKEND_BUCKET: comic-website-tfstate-2024

jobs:
  confirm-destroy:
    name: "Confirm Destruction"
    runs-on: ubuntu-latest
    outputs:
      confirmed: ${{ steps.confirm.outputs.confirmed }}
    steps:
    - name: Confirm Destruction
      id: confirm
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" = "DESTROY" ]; then
          echo "‚úÖ Destruction confirmed"
          echo "confirmed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Destruction not confirmed. Please type 'DESTROY' to confirm."
          echo "confirmed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

  destroy-kubernetes-resources:
    name: "Destroy Kubernetes Resources"
    runs-on: ubuntu-latest
    needs: confirm-destroy
    if: needs.confirm-destroy.outputs.confirmed == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.CLUSTER_NAME }}

    - name: Setup Kubernetes tools
      uses: azure/setup-kubectl@v3

    - name: Delete Kubernetes Resources
      run: |
        echo "üóëÔ∏è  Deleting Kubernetes resources..."
        
        # Delete all resources in the namespace
        kubectl delete all --all -n ${{ env.NAMESPACE }} --ignore-not-found=true
        
        # Delete namespace
        kubectl delete namespace ${{ env.NAMESPACE }} --ignore-not-found=true
        
        # Delete ALB Ingress Controller
        helm uninstall aws-load-balancer-controller -n kube-system --ignore-not-found=true
        
        echo "‚úÖ Kubernetes resources destroyed"

    - name: Cleanup ECR Images
      run: |
        echo "üßπ Cleaning up ECR images..."
        
        # Delete backend images
        aws ecr batch-delete-image \
          --repository-name comic-website-prod-backend \
          --image-ids imageTag=latest \
          --region ${{ env.AWS_REGION }} || true
        
        # Delete frontend images  
        aws ecr batch-delete-image \
          --repository-name comic-website-prod-frontend \
          --image-ids imageTag=latest \
          --region ${{ env.AWS_REGION }} || true
        
        echo "‚úÖ ECR images cleaned up"

  destroy-terraform-infrastructure:
    name: "Destroy Terraform Infrastructure"
    runs-on: ubuntu-latest
    needs: 
      - confirm-destroy
      - destroy-kubernetes-resources
    if: needs.confirm-destroy.outputs.confirmed == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
          -backend-config="key=terraform/state/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=comic-website-tfstate-lock"

    - name: Terraform Destroy
      run: |
        cd terraform
        terraform destroy -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}"

    - name: Cleanup S3 Backend
      run: |
        echo "üßπ Cleaning up S3 backend bucket..."
        
        # Empty the S3 bucket
        aws s3 rm s3://${{ env.TF_BACKEND_BUCKET }} --recursive --region ${{ env.AWS_REGION }} || true
        
        # Delete the S3 bucket
        aws s3 rb s3://${{ env.TF_BACKEND_BUCKET }} --region ${{ env.AWS_REGION }} || true
        
        # Delete DynamoDB table
        aws dynamodb delete-table \
          --table-name comic-website-tfstate-lock \
          --region ${{ env.AWS_REGION }} || true
        
        echo "‚úÖ S3 backend and DynamoDB table cleaned up"

  final-cleanup:
    name: "Final Cleanup"
    runs-on: ubuntu-latest
    needs: destroy-terraform-infrastructure
    if: always()
    environment: production
    
    steps:
    - name: Destroy Completion Status
      run: |
        if [ "${{ needs.destroy-terraform-infrastructure.result }}" == "success" ]; then
          echo "üéâ Infrastructure destruction completed successfully!"
          echo "All AWS resources have been destroyed."
        else
          echo "‚ùå Infrastructure destruction failed or was incomplete."
          echo "Please check the logs above for details."
        fi